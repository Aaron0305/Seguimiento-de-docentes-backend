import axios from 'axios';
import FormData from 'form-data';

console.log('üé≠ CREANDO ASIGNACIONES DE PRUEBA PARA DOCENTES');
console.log('==============================================\n');

async function createTestAssignments() {
    const BASE_URL = 'http://localhost:3001/api';
    
    try {
        // 1. Login como admin para crear asignaciones
        console.log('1Ô∏è‚É£ Login como administrador...');
        const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
            email: 'admin@test.com',
            password: 'admin123'
        });
        
        const adminToken = loginResponse.data.token;
        console.log('‚úÖ Login exitoso');
        
        // 2. Crear varias asignaciones de prueba
        const assignmentsToCreate = [
            {
                title: 'Planificaci√≥n del Curriculum Semestral',
                description: 'Elaborar la planificaci√≥n completa del curriculum para el pr√≥ximo semestre, incluyendo objetivos de aprendizaje, cronograma de actividades y metodolog√≠as de evaluaci√≥n.',
                dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 semana
                isGeneral: true
            },
            {
                title: 'Evaluaci√≥n de Proyectos Finales',
                description: 'Revisar y evaluar todos los proyectos finales de los estudiantes del curso actual. Proporcionar retroalimentaci√≥n detallada y calificaciones.',
                dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 d√≠as
                isGeneral: true
            },
            {
                title: 'Preparaci√≥n de Material Did√°ctico',
                description: 'Crear y actualizar material did√°ctico para las pr√≥ximas clases, incluyendo presentaciones, ejercicios pr√°cticos y recursos multimedia.',
                dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 2 semanas
                isGeneral: true
            },
            {
                title: 'Reuni√≥n de Coordinaci√≥n Acad√©mica',
                description: 'Participar en la reuni√≥n mensual de coordinaci√≥n acad√©mica para discutir estrategias pedag√≥gicas y resolver temas administrativos.',
                dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 d√≠as
                isGeneral: true
            },
            {
                title: 'Capacitaci√≥n en Nuevas Tecnolog√≠as',
                description: 'Completar el curso de capacitaci√≥n en nuevas tecnolog√≠as educativas para mejorar la ense√±anza en modalidad virtual y presencial.',
                dueDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 3 semanas
                isGeneral: true
            }
        ];
        
        console.log('\n2Ô∏è‚É£ Creando asignaciones de prueba...');
        const createdAssignments = [];
        
        for (let i = 0; i < assignmentsToCreate.length; i++) {
            const assignment = assignmentsToCreate[i];
            
            const formData = new FormData();
            formData.append('title', assignment.title);
            formData.append('description', assignment.description);
            formData.append('dueDate', assignment.dueDate.toISOString());
            formData.append('isGeneral', assignment.isGeneral.toString());
            
            try {
                const response = await axios.post(`${BASE_URL}/assignments`, formData, {
                    headers: {
                        'Authorization': `Bearer ${adminToken}`,
                        ...formData.getHeaders()
                    }
                });
                
                if (response.data.success) {
                    createdAssignments.push(response.data.data);
                    console.log(`‚úÖ Asignaci√≥n ${i + 1} creada: "${assignment.title}"`);
                }
            } catch (error) {
                console.log(`‚ùå Error creando asignaci√≥n ${i + 1}:`, error.response?.data?.error || error.message);
            }
        }
        
        console.log(`\nüìä Resumen: ${createdAssignments.length} asignaciones creadas exitosamente`);
        
        // 3. Ahora probemos los endpoints de docente con datos reales
        console.log('\n3Ô∏è‚É£ Probando endpoints con datos reales...');
        
        // Obtener estad√≠sticas
        const statsResponse = await axios.get(`${BASE_URL}/assignments/teacher/stats`, {
            headers: { Authorization: `Bearer ${adminToken}` }
        });
        
        console.log('üìä Estad√≠sticas actualizadas:');
        console.log(`  - Total: ${statsResponse.data.stats.total}`);
        console.log(`  - Pendientes: ${statsResponse.data.stats.pending}`);
        console.log(`  - Completadas: ${statsResponse.data.stats.completed}`);
        console.log(`  - Vencidas: ${statsResponse.data.stats.overdue}`);
        console.log(`  - Pr√≥ximas a vencer: ${statsResponse.data.stats.upcomingDeadlines}`);
        console.log(`  - Tasa de finalizaci√≥n: ${statsResponse.data.stats.completionRate}%`);
        
        // Obtener asignaciones
        const assignmentsResponse = await axios.get(`${BASE_URL}/assignments/teacher/assignments`, {
            headers: { Authorization: `Bearer ${adminToken}` },
            params: { limit: 10 }
        });
        
        console.log(`\nüìã Asignaciones disponibles: ${assignmentsResponse.data.assignments.length}`);
        
        if (assignmentsResponse.data.assignments.length > 0) {
            const firstAssignment = assignmentsResponse.data.assignments[0];
            console.log(`\nüìù Primera asignaci√≥n: "${firstAssignment.title}"`);
            console.log(`   Estado: ${firstAssignment.status}`);
            console.log(`   Vence: ${new Date(firstAssignment.dueDate).toLocaleDateString()}`);
            
            // Marcar una como completada para prueba
            console.log('\n4Ô∏è‚É£ Marcando una asignaci√≥n como completada...');
            try {
                const completeResponse = await axios.patch(
                    `${BASE_URL}/assignments/teacher/${firstAssignment._id}/complete`,
                    {},
                    { headers: { Authorization: `Bearer ${adminToken}` } }
                );
                
                console.log('‚úÖ Asignaci√≥n marcada como completada exitosamente');
                
                // Verificar estad√≠sticas actualizadas
                const updatedStatsResponse = await axios.get(`${BASE_URL}/assignments/teacher/stats`, {
                    headers: { Authorization: `Bearer ${adminToken}` }
                });
                
                console.log('\nüìä Estad√≠sticas despu√©s de completar una asignaci√≥n:');
                console.log(`  - Completadas: ${updatedStatsResponse.data.stats.completed}`);
                console.log(`  - Pendientes: ${updatedStatsResponse.data.stats.pending}`);
                console.log(`  - Tasa de finalizaci√≥n: ${updatedStatsResponse.data.stats.completionRate}%`);
                
            } catch (error) {
                console.log('‚ùå Error marcando como completada:', error.response?.data?.error);
            }
        }
        
        console.log('\nüéâ CONFIGURACI√ìN DE PRUEBA COMPLETADA');
        console.log('====================================');
        console.log('‚úÖ Asignaciones de prueba creadas');
        console.log('‚úÖ Endpoints funcionando correctamente');
        console.log('‚úÖ Sistema listo para pruebas del frontend');
        console.log('\nüöÄ Ahora puedes probar la interfaz de docentes en el frontend!');
        
    } catch (error) {
        console.error('‚ùå ERROR:', error.message);
        if (error.response) {
            console.error('üìã Respuesta:', error.response.data);
        }
    }
}

createTestAssignments();
