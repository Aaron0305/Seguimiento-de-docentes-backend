import sys
from PyQt6.QtWidgets import *
from PyQt6.QtCore import *
from PyQt6.QtGui import *
import re

class CharGrammarAnalyzer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("🌳 Analizador Sintáctico - Gramática CHAR ")
        self.setGeometry(100, 100, 1800, 1000)

        # Colores modernos - FONDO BLANCO
        self.colors = {
            'primary': '#2563eb',
            'secondary': '#7c3aed', 
            'success': '#059669',
            'danger': '#dc2626',
            'warning': '#d97706',
            'info': '#0891b2',
            'dark': '#1f2937',
            'light': '#f8fafc',
            'accent': '#ec4899',
            'background': '#ffffff'  # FONDO BLANCO
        }
        
        # GRAMÁTICA MODIFICADA - Solo ID, sin F
        self.grammar = {
            'S': [['A', 'Ñ']],
            'A': [['char']],
            'B': [['id']],  
            'C': [['=']],
            'D': [["'"]],
            'E': [[',']],
            'G': [['Σ']],  # Para el valor del carácter
            'H': [[';']],
            'J': [['D', 'O']],  # Para 'valor'
            'O': [['G', 'D']],  # Para valor'
            'I': [['B'], ['B', 'C', 'J']],  # B sola O B = 'valor'
            'K': [['J', 'L']],
            'Ñ': [['I', 'L']],  # Una declaración seguida de más
            'L': [['E', 'Ñ'], ['H', 'λ']]  # , más_declaraciones O ; fin
        }
        
        self.terminales = ['char', 'id', '=', ',', ';', "'", 'Σ', 'λ']
        self.no_terminales = ['S', 'A', 'B', 'C', 'D', 'E', 'G', 'H', 'I', 'J', 'K', 'L', 'Ñ', 'O']
        
        self.setup_ui()
        self.apply_modern_style()
        
    def setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # Header compacto
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_frame.setMaximumHeight(80)
        header_layout = QVBoxLayout()
        
        title_label = QLabel("🌳 Analizador Sintáctico CHAR ")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setObjectName("mainTitle")
        header_layout.addWidget(title_label)
        
        header_frame.setLayout(header_layout)
        main_layout.addWidget(header_frame)
        
        # Layout horizontal para gramática y árbol
        content_layout = QHBoxLayout()
        
        # Panel izquierdo: Gramática y controles
        left_panel = QFrame()
        left_panel.setObjectName("leftPanel")
        left_panel.setMaximumWidth(350)
        left_layout = QVBoxLayout()
        
        # Input section
        input_frame = QFrame()
        input_frame.setObjectName("inputFrame")
        input_layout = QVBoxLayout()
        
        input_label = QLabel("💻 Declaración CHAR:")
        input_label.setObjectName("inputLabel")
        input_layout.addWidget(input_label)
        
        self.input_field = QLineEdit()
        self.input_field.setText("char id = 'a', id, id = 'd';")
        self.input_field.setObjectName("inputField")
        self.input_field.setPlaceholderText("Ejemplos: char id, id, id; o char id = 'x', id = 'A', id;")
        input_layout.addWidget(self.input_field)
        
        buttons_layout = QHBoxLayout()
        analyze_btn = QPushButton("🚀 Analizar")
        analyze_btn.setObjectName("primaryButton")
        analyze_btn.clicked.connect(self.analyze_input)
        buttons_layout.addWidget(analyze_btn)
        
        clear_btn = QPushButton("🗑️ Limpiar")
        clear_btn.setObjectName("secondaryButton")
        clear_btn.clicked.connect(self.clear_tree)
        buttons_layout.addWidget(clear_btn)
        
        input_layout.addLayout(buttons_layout)
        input_frame.setLayout(input_layout)
        left_layout.addWidget(input_frame)
        
        # Status
        self.status_label = QLabel("✅ Listo para analizar")
        self.status_label.setObjectName("statusLabel")
        left_layout.addWidget(self.status_label)
        
        # Gramática
        grammar_frame = QFrame()
        grammar_frame.setObjectName("grammarFrame")
        grammar_layout = QVBoxLayout()
        
        grammar_title = QLabel("📚 Gramática Libre de Contexto (Solo ID)")
        grammar_title.setObjectName("grammarTitle")
        grammar_layout.addWidget(grammar_title)
        
        self.grammar_text = QTextEdit()
        self.grammar_text.setObjectName("grammarText")
        self.grammar_text.setMaximumHeight(400)
        self.display_grammar()
        grammar_layout.addWidget(self.grammar_text)
        
        grammar_frame.setLayout(grammar_layout)
        left_layout.addWidget(grammar_frame)
        
        left_panel.setLayout(left_layout)
        content_layout.addWidget(left_panel)
        
        # Panel derecho: Árbol sintáctico
        tree_frame = QFrame()
        tree_frame.setObjectName("treeFrame")
        tree_layout = QVBoxLayout()
        
        # Scroll area para el árbol
        scroll = QScrollArea()
        scroll.setObjectName("treeScroll")
        
        self.tree_canvas = SyntaxTreeCanvas()
        self.tree_canvas.setMinimumSize(2500, 1800)  # Área más grande
        
        scroll.setWidget(self.tree_canvas)
        scroll.setWidgetResizable(True)
        tree_layout.addWidget(scroll)
        
        tree_frame.setLayout(tree_layout)
        content_layout.addWidget(tree_frame)
        
        main_layout.addLayout(content_layout)
        
    def display_grammar(self):
        """Muestra la gramática modificada"""
        grammar_text = "GRAMÁTICA LIBRE DE CONTEXTO MODIFICADA \n\n"
        grammar_text += "PRODUCCIONES:\n"
        grammar_text += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
        
        # Mostrar gramática con explicaciones
        grammar_text += "S → A Ñ           // Inicio: 'char' + declaraciones\n"
        grammar_text += "A → char          // Palabra clave\n"
        grammar_text += "B → id            // Solo identificadores \n"
        grammar_text += "C → =             // Operador asignación\n"
        grammar_text += "D → '             // Comilla simple\n"
        grammar_text += "E → ,             // Separador de declaraciones\n"
        grammar_text += "G → Σ             // Valor del carácter\n"
        grammar_text += "H → ;             // Terminador de sentencia\n"
        grammar_text += "J → D O           // 'valor'\n"
        grammar_text += "O → G D           // valor'\n"
        grammar_text += "I → B             // Solo id\n"
        grammar_text += "  | B C J         // id = 'valor'\n"
        grammar_text += "K → J L           // (no usado en esta versión)\n"
        grammar_text += "Ñ → I L           // Una declaración + continuación\n"
        grammar_text += "L → E Ñ           // , + más declaraciones\n"
        grammar_text += "  | H λ           // ; + fin\n"
        
        grammar_text += "\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
        grammar_text += f"TERMINALES: {', '.join(self.terminales)}\n"
        grammar_text += f"NO TERMINALES: {', '.join(self.no_terminales)}\n"
        grammar_text += "SÍMBOLO INICIAL: S\n"
        
        # Ejemplos válidos
        grammar_text += "\n✅ EJEMPLOS VÁLIDOS:\n"
        grammar_text += "• char id;                    // Solo una declaración\n"
        grammar_text += "• char id, id, id;            // Múltiples sin valor\n" 
        grammar_text += "• char id = 'a';              // Con valor (letra)\n"
        grammar_text += "• char id = 'Z', id = 'x';    // Con valores válidos\n"
        grammar_text += "• char id = 'a', id, id = 'B'; // Mixto\n"
        
        grammar_text += "\n❌ EJEMPLOS INVÁLIDOS:\n"
        grammar_text += "• char id = '3';              // Números NO válidos\n"
        grammar_text += "• char id = '@';              // Símbolos NO válidos\n" 
        grammar_text += "• char id = 'ab';             // Más de un carácter\n"
        grammar_text += "• char id = '';               // Cadena vacía\n"
        
        grammar_text += "\n🔍 VALIDACIONES CHAR:\n"
        grammar_text += "• Solo acepta 'id' como tipo\n"
        grammar_text += "• Valores: solo letras (a-z, A-Z)\n"
        grammar_text += "• Exactamente 1 carácter entre comillas\n"
        grammar_text += "• Debe terminar con ';'\n"
        
        self.grammar_text.setPlainText(grammar_text)
    
    def validate_char_value(self, value):
        """🔍 VALIDACIÓN ESTRICTA DE VALORES PARA CHAR"""
        # Verificar que no esté vacío
        if not value:
            return False, "El valor no puede estar vacío"
        
        # Verificar que sea exactamente 1 carácter
        if len(value) != 1:
            return False, f"El valor debe ser exactamente 1 carácter, recibido: '{value}' ({len(value)} caracteres)"
        
        # VALIDACIÓN ESTRICTA: Solo letras mayúsculas y minúsculas
        if not value.isalpha():
            if value.isdigit():
                return False, f"Los números no son válidos para char. Recibido: '{value}'"
            elif value in "!@#$%^&*()_+-=[]{}|;:,.<>?/~`":
                return False, f"Los símbolos no son válidos para char. Recibido: '{value}'"
            else:
                return False, f"Solo se permiten letras (a-z, A-Z). Recibido: '{value}'"
        
        # Si llegamos aquí, es una letra válida
        return True, f"✅ Valor válido para char: '{value}'"
    
    def parse_input(self, entrada):
        """🔍 ANÁLISIS MEJORADO - SOLO ID CON VALIDACIÓN ESTRICTA (PERMITE DUPLICADOS)"""
        entrada = entrada.strip()
        
        # Verificar formato básico char ... ;
        if not entrada.startswith('char ') or not entrada.endswith(';'):
            return None, "❌ Debe empezar con 'char' y terminar con ';'"
        
        # Extraer parte de declaraciones
        content = entrada[5:-1].strip()  # Quitar 'char ' y ';'
        
        if not content:
            return None, "❌ No hay declaraciones después de 'char'"
        
        # Dividir por comas
        declarations_raw = [decl.strip() for decl in content.split(',')]
        declarations = []
        
        for i, decl in enumerate(declarations_raw):
            # Patrón 1: solo 'id'
            if decl == 'id':
                declarations.append(('id', None))  # Sin valor asignado
                continue
            
            # Patrón 2: 'id = valor' - Más estricto en la validación
            match = re.match(r"id\s*=\s*'(.)'", decl)
            if match:
                value = match.group(1)
                
                # Validar el valor con reglas estrictas
                is_valid, message = self.validate_char_value(value)
                if not is_valid:
                    return None, f"❌ Declaración {i+1}: {message}"
                
                declarations.append(('id', value))
                continue
            
            # Verificar si intentó usar comillas pero con formato incorrecto
            if "'" in decl:
                if decl.count("'") != 2:
                    return None, f"❌ Declaración {i+1}: Faltan comillas o comillas desbalanceadas en '{decl}'"
                elif re.search(r"''.+'", decl):
                    return None, f"❌ Declaración {i+1}: Valor de más de un carácter en '{decl}'"
                else:
                    return None, f"❌ Declaración {i+1}: Formato de comillas incorrecto en '{decl}'"
            
            # Si no coincide con ningún patrón
            return None, f"❌ Declaración {i+1} inválida: '{decl}'. Use 'id' o 'id = \"letra\"'"
        
        if not declarations:
            return None, "❌ No se encontraron declaraciones válidas"
            
        return declarations, "✅ Todas las declaraciones son válidas"
    
    def analyze_input(self):
        entrada = self.input_field.text().strip()
        
        if not entrada:
            self.status_label.setText("❌ Por favor ingresa una declaración")
            self.status_label.setObjectName("errorStatus")
            self.apply_modern_style()
            return
        
        result = self.parse_input(entrada)
        
        if result is None:
            self.status_label.setText("❌ Error: formato inválido")
            self.status_label.setObjectName("errorStatus")
            self.apply_modern_style()
            return
            
        declarations, message = result
        
        if declarations is None:
            self.status_label.setText(message)
            self.status_label.setObjectName("errorStatus")
            self.apply_modern_style()
            return
        
        # Mostrar estadísticas
        with_value = sum(1 for _, value in declarations if value is not None)
        without_value = len(declarations) - with_value
        
        stats = f"✅ Análisis exitoso: {len(declarations)} declaración(es) válidas "
        stats += f"({with_value} con valor, {without_value} sin valor)"
        
        self.status_label.setText(stats)
        self.status_label.setObjectName("successStatus")
        self.apply_modern_style()
        
        self.tree_canvas.set_declarations(declarations, entrada)
        self.tree_canvas.update()
        
    def clear_tree(self):
        self.input_field.clear()
        self.tree_canvas.clear_tree()
        self.status_label.setText("🔄 Árbol limpiado")
        self.status_label.setObjectName("statusLabel")
        self.apply_modern_style()
        
    def apply_modern_style(self):
        style = f"""
        QMainWindow {{
            background-color: {self.colors['background']};
            color: {self.colors['dark']};
        }}
        
        #headerFrame {{
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                stop:0 {self.colors['primary']}, stop:1 {self.colors['secondary']});
            border-radius: 10px;
            margin: 5px;
            padding: 10px;
        }}
        
        #mainTitle {{
            font-size: 20px;
            font-weight: bold;
            color: white;
            margin: 5px;
        }}
        
        #leftPanel {{
            background-color: {self.colors['light']};
            border-radius: 10px;
            margin: 5px;
            padding: 10px;
        }}
        
        #inputFrame {{
            background-color: white;
            border: 2px solid {self.colors['primary']};
            border-radius: 8px;
            margin: 5px;
            padding: 15px;
        }}
        
        #inputLabel {{
            font-weight: bold;
            color: {self.colors['dark']};
            font-size: 14px;
            margin-bottom: 5px;
        }}
        
        #inputField {{
            padding: 10px;
            border: 2px solid {self.colors['primary']};
            border-radius: 6px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 12px;
            background-color: white;
            color: {self.colors['dark']};
        }}
        
        #primaryButton, #secondaryButton {{
            font-weight: bold;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-size: 12px;
            min-width: 100px;
        }}
        
        #primaryButton {{
            background: {self.colors['primary']};
            color: white;
        }}
        
        #secondaryButton {{
            background: {self.colors['warning']};
            color: white;
        }}
        
        #statusLabel {{
            background-color: {self.colors['info']};
            color: white;
            padding: 10px;
            border-radius: 6px;
            margin: 5px;
            font-weight: bold;
            font-size: 12px;
        }}
        
        #successStatus {{
            background-color: {self.colors['success']};
        }}
        
        #errorStatus {{
            background-color: {self.colors['danger']};
        }}
        
        #grammarFrame {{
            background-color: white;
            border: 2px solid {self.colors['secondary']};
            border-radius: 8px;
            margin: 5px;
            padding: 10px;
        }}
        
        #grammarTitle {{
            font-weight: bold;
            color: {self.colors['dark']};
            font-size: 14px;
            margin-bottom: 5px;
        }}
        
        #grammarText {{
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 11px;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            color: {self.colors['dark']};
            padding: 5px;
        }}
        
        #treeFrame {{
            background-color: white;
            border: 2px solid {self.colors['accent']};
            border-radius: 8px;
            margin: 5px;
        }}
        
        #treeScroll {{
            border: none;
            background-color: white;
        }}
        """
        
        self.setStyleSheet(style)

class SyntaxTreeCanvas(QWidget):
    def __init__(self):
        super().__init__()
        self.setMinimumSize(2500, 1800)  # Área más grande para mejor espaciado
        self.declarations = []
        self.input_text = ""
        
        # Colores para mejor visibilidad
        self.non_terminal_color = QColor('#ff8c00')  # Naranja para no terminales
        self.terminal_color = QColor('#22c55e')      # Verde para terminales
        
    def set_declarations(self, declarations, input_text):
        self.declarations = declarations
        self.input_text = input_text
        
    def clear_tree(self):
        self.declarations = []
        self.input_text = ""
        self.update()
        
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)
        
        # Fondo blanco
        painter.fillRect(self.rect(), QBrush(QColor('#ffffff')))
        
        if not self.declarations:
            font = QFont("Arial", 16, QFont.Weight.Bold)
            painter.setFont(font)
            painter.setPen(QPen(QColor('#64748b'), 2))
            painter.drawText(self.rect(), Qt.AlignmentFlag.AlignCenter, 
                           "🌳 Ingresa una declaración para ver el árbol sintáctico")
            return
            
        self.draw_syntax_tree(painter)
        
    def draw_syntax_tree(self, painter):
        """🌳 DIBUJA EL ÁRBOL CON MEJOR ESPACIADO"""
        font = QFont("Arial", 16, QFont.Weight.Bold)  # Fuente más grande
        painter.setFont(font)
        
        # Parámetros de espaciado mejorados
        start_x = 300
        start_y = 100
        level_height = 120      # Más espacio vertical
        horizontal_spacing = 200 # Más espacio horizontal
        
        def draw_text_node(x, y, text, is_terminal=False):
            x, y = int(x), int(y)
            
            # Seleccionar color según tipo
            if is_terminal:
                painter.setPen(QPen(self.terminal_color, 3))
            else:
                painter.setPen(QPen(self.non_terminal_color, 3))
            
            # Configurar fuente
            font_metrics = painter.fontMetrics()
            text_width = font_metrics.horizontalAdvance(text)
            text_height = font_metrics.height()
            
            # Centrar texto
            text_x = x - text_width // 2
            text_y = y + text_height // 4
            
            # Dibujar con padding para comillas
            display_text = f" {text} " if text == "'" else text
            painter.drawText(text_x, text_y, display_text)
            
        def draw_line(x1, y1, x2, y2):
            painter.setPen(QPen(QColor('#374151'), 2))
            painter.drawLine(int(x1), int(y1), int(x2), int(y2))
        
        # Dibujar árbol completo
        self.draw_complete_tree_improved(painter, draw_text_node, draw_line, start_x, start_y, 
                                        level_height, horizontal_spacing)
        
    def draw_complete_tree_improved(self, painter, draw_node, draw_line, start_x, start_y, 
                                   level_height, horizontal_spacing):
        """🌳 ÁRBOL CON ESPACIADO MEJORADO Y MÁS ORGANIZADO"""
        
        # Aumentar espaciado base para mejor visualización
        base_spacing = horizontal_spacing * 1.5
        
        # Nivel 1: S (raíz)
        s_x = start_x + base_spacing
        s_y = start_y
        draw_node(s_x, s_y, 'S', False)
        
        # Nivel 2: A Ñ
        level2_y = s_y + level_height
        a_x = s_x - base_spacing * 0.7
        n_x = s_x + base_spacing * 0.7
        
        draw_line(s_x, s_y + 15, a_x, level2_y - 15)
        draw_line(s_x, s_y + 15, n_x, level2_y - 15)
        
        draw_node(a_x, level2_y, 'A', False)
        draw_node(n_x, level2_y, 'Ñ', False)
        
        # Nivel 3: char (desde A)
        level3_y = level2_y + level_height
        char_x = a_x
        
        draw_line(a_x, level2_y + 15, char_x, level3_y - 15)
        draw_node(char_x, level3_y, 'char', True)
        
        # Dibujar declaraciones con espaciado mejorado
        self.draw_declarations_improved(
            painter, draw_node, draw_line, n_x, level2_y,
            level_height, base_spacing, 0
        )
        
    def draw_declarations_improved(self, painter, draw_node, draw_line, n_x, n_y,
                                  level_height, spacing, decl_index):
        """🌳 DECLARACIONES CON ESPACIADO MEJORADO Y MÁS CLARO"""
        
        if decl_index >= len(self.declarations):
            return
            
        current_decl = self.declarations[decl_index]
        var_type, value = current_decl
        
        # Aumentar espaciado para nodos I y L
        il_y = n_y + level_height
        i_x = n_x - spacing * 0.5  # Más espacio entre I y L
        l_x = n_x + spacing * 0.5
        
        draw_line(n_x, n_y + 15, i_x, il_y - 15)
        draw_line(n_x, n_y + 15, l_x, il_y - 15)
        
        draw_node(i_x, il_y, 'I', False)
        draw_node(l_x, il_y, 'L', False)
        
        # Expansión de I con más espacio
        i_expand_y = il_y + level_height
        
        if value is None:
            # I -> B (solo id)
            draw_line(i_x, il_y + 15, i_x, i_expand_y - 15)
            draw_node(i_x, i_expand_y, 'B', False)
            
            # B -> id
            b_expand_y = i_expand_y + level_height
            draw_line(i_x, i_expand_y + 15, i_x, b_expand_y - 15)
            draw_node(i_x, b_expand_y, 'id', True)
            
        else:
            # I -> B C J con más espacio entre nodos
            b_x = i_x - spacing * 0.4
            c_x = i_x
            j_x = i_x + spacing * 0.4
            
            draw_line(i_x, il_y + 15, b_x, i_expand_y - 15)
            draw_line(i_x, il_y + 15, c_x, i_expand_y - 15)
            draw_line(i_x, il_y + 15, j_x, i_expand_y - 15)
            
            draw_node(b_x, i_expand_y, 'B', False)
            draw_node(c_x, i_expand_y, 'C', False)
            draw_node(j_x, i_expand_y, 'J', False)
            
            # B -> id, C -> =
            b_expand_y = i_expand_y + level_height
            draw_line(b_x, i_expand_y + 15, b_x, b_expand_y - 15)
            draw_line(c_x, i_expand_y + 15, c_x, b_expand_y - 15)
            
            draw_node(b_x, b_expand_y, 'id', True)
            draw_node(c_x, b_expand_y, '=', True)
            
            # J -> D O con más espacio
            d1_x = j_x - spacing * 0.3
            o_x = j_x + spacing * 0.3
            
            draw_line(j_x, i_expand_y + 15, d1_x, b_expand_y - 15)
            draw_line(j_x, i_expand_y + 15, o_x, b_expand_y - 15)
            
            draw_node(d1_x, b_expand_y, 'D', False)
            draw_node(o_x, b_expand_y, 'O', False)
            
            # D -> ', O -> G D con más espacio
            d_expand_y = b_expand_y + level_height
            g_x = o_x - spacing * 0.2
            d2_x = o_x + spacing * 0.2
            
            draw_line(d1_x, b_expand_y + 15, d1_x, d_expand_y - 15)
            draw_line(o_x, b_expand_y + 15, g_x, d_expand_y - 15)
            draw_line(o_x, b_expand_y + 15, d2_x, d_expand_y - 15)
            
            draw_node(d1_x, d_expand_y, "'", True)
            draw_node(g_x, d_expand_y, 'G', False)
            draw_node(d2_x, d_expand_y, 'D', False)
            
            # G -> Σ (valor), D -> '
            g_expand_y = d_expand_y + level_height
            draw_line(g_x, d_expand_y + 15, g_x, g_expand_y - 15)
            draw_line(d2_x, d_expand_y + 15, d2_x, g_expand_y - 15)
            
            draw_node(g_x, g_expand_y, value, True)
            draw_node(d2_x, g_expand_y, "'", True)

        # Expansión de L con más espacio
        if decl_index == len(self.declarations) - 1:
            # Última declaración: L -> H λ
            h_x = l_x - spacing * 0.25
            lambda_x = l_x + spacing * 0.25
            l_expand_y = il_y + level_height
            
            draw_line(l_x, il_y + 15, h_x, l_expand_y - 15)
            draw_line(l_x, il_y + 15, lambda_x, l_expand_y - 15)
            
            draw_node(h_x, l_expand_y, 'H', False)
            draw_node(lambda_x, l_expand_y, 'λ', True)
            
            # H -> ;
            h_expand_y = l_expand_y + level_height
            draw_line(h_x, l_expand_y + 15, h_x, h_expand_y - 15)
            draw_node(h_x, h_expand_y, ';', True)
            
        else:
            # Más declaraciones: L -> E Ñ con más espacio
            e_x = l_x - spacing * 0.3
            next_n_x = l_x + spacing * 0.7  # Más espacio para la siguiente Ñ
            
            l_expand_y = il_y + level_height
            
            draw_line(l_x, il_y + 15, e_x, l_expand_y - 15)
            draw_line(l_x, il_y + 15, next_n_x, l_expand_y - 15)
            
            draw_node(e_x, l_expand_y, 'E', False)
            draw_node(next_n_x, l_expand_y, 'Ñ', False)
            
            # E -> ,
            e_expand_y = l_expand_y + level_height
            draw_line(e_x, l_expand_y + 15, e_x, e_expand_y - 15)
            draw_node(e_x, e_expand_y, ',', True)
            
            # Recursivamente dibujar siguiente declaración con más espacio
            self.draw_declarations_improved(
                painter, draw_node, draw_line, next_n_x, l_expand_y,
                level_height, spacing * 0.9, decl_index + 1  # Reducir espaciado gradualmente
            )

def main():
    app = QApplication(sys.argv)
    
    # Configurar fuente por defecto
    font = QFont("Segoe UI", 10)
    app.setFont(font)
    
    # Crear y mostrar la ventana
    window = CharGrammarAnalyzer()
    window.show()
    
    # Ejecutar la aplicación
    sys.exit(app.exec())

if __name__ == "__main__":
    main()