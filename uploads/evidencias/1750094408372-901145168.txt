import React, { useState, useRef, useEffect, useCallback, useContext } from 'react';
import { AuthContext } from '../../contexts/AuthContext';
import SessionHistory from './SessionHistory';
import {
  Box,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Typography,
  Card,
  CardContent,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Alert,
  Snackbar,
  Avatar,
  Divider,
  LinearProgress,
  IconButton,
  Tooltip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  Fab,
  Badge,
  CircularProgress
} from '@mui/material';
import {
  PlayArrow,
  Stop,
  Add,
  AttachFile,
  Delete,
  Close,
  Save,
  AccessTime,
  CalendarToday,
  Assignment,
  CloudUpload,
  Description,
  Image,
  VideoFile,
  AudioFile,
  InsertDriveFile,
  Archive
} from '@mui/icons-material';
import './ActiveSession.css';

const ActiveSession = () => {
  const { currentUser, loading } = useContext(AuthContext);
  
  // Estado para controlar cuando el usuario está listo
  const [userReady, setUserReady] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [openWelcome, setOpenWelcome] = useState(true);
  const [openActividades, setOpenActividades] = useState(false);
  
  // Estados para la sesión actual
  const [actividades, setActividades] = useState('');
  const [horaEntrada, setHoraEntrada] = useState('--:--');
  const [horaSalida, setHoraSalida] = useState('--:--');
  const [tiempoAcumulado, setTiempoAcumulado] = useState('0 horas y 0 minutos');
  const [sesionIniciada, setSesionIniciada] = useState(false);
  const [sesionFinalizada, setSesionFinalizada] = useState(false);
  const [evidencias, setEvidencias] = useState([]);
  const fileInputRef = useRef(null);
  
  // Estados para el historial
  const [fechaSeleccionada, setFechaSeleccionada] = useState(null);
  const [mostrarTabla, setMostrarTabla] = useState(true);
  const [mostrarDetalle, setMostrarDetalle] = useState(false);
  const [registroSeleccionado, setRegistroSeleccionado] = useState(null);
  const [fechaInicioServicio, setFechaInicioServicio] = useState(null);
  const [fechaFinServicio, setFechaFinServicio] = useState(null);
  
  // Estado para los registros - INICIALIZADO VACÍO
  const [registrosHistorial, setRegistrosHistorial] = useState([]);
  const [loadingRegistros, setLoadingRegistros] = useState(true);

  // Estados para el diálogo
  const [openDialog, setOpenDialog] = useState(false);
  const [dialogType, setDialogType] = useState(''); // 'start' o 'end'

  // Detectar cuando el usuario está completamente cargado y recargar la página
  useEffect(() => {
    if (!loading && currentUser) {
      console.log('✅ Usuario completamente cargado:', currentUser);
      console.log('📁 Foto de perfil disponible:', currentUser.fotoPerfil);
      
      // Verificar si ya se recargó la página para este usuario
      const lastUserReload = sessionStorage.getItem('lastUserReload');
      const currentUserKey = `${currentUser._id}-${currentUser.fotoPerfil}`;
      
      if (lastUserReload !== currentUserKey) {
        console.log('🔄 Recargando página para mostrar imagen actualizada...');
        
        // Guardar la clave del usuario actual en sessionStorage
        sessionStorage.setItem('lastUserReload', currentUserKey);
        
        // Recargar la página después de un pequeño delay
        setTimeout(() => {
          window.location.reload();
        }, 5);
        
        return; 
      }
      
      setUserReady(true);
      
    } else if (!loading && !currentUser) {
      console.log('❌ No hay usuario autenticado');
      setUserReady(true);
    }
  }, [loading, currentUser?.fotoPerfil, currentUser?._id]);

  // Cargar registros al montar el componente - MEJORADO
  useEffect(() => {
    const cargarRegistros = async () => {
      if (!currentUser?._id) {
        setLoadingRegistros(false);
        return;
      }

      try {
        setLoadingRegistros(true);
        console.log('🔄 Cargando registros para usuario:', currentUser._id);
        
        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error('No hay token de autenticación');
        }

        const response = await fetch(`http://localhost:3001/api/records/user/${currentUser._id}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('📊 Respuesta completa de la API:', data);
        
        // Verificar si la respuesta tiene la estructura esperada
        let registrosArray = [];
        
        if (Array.isArray(data)) {
          registrosArray = data;
        } else if (data && Array.isArray(data.data)) {
          registrosArray = data.data;
        } else if (data && Array.isArray(data.records)) {
          registrosArray = data.records;
        } else if (data && typeof data === 'object') {
          const possibleArrays = Object.values(data).filter(Array.isArray);
          if (possibleArrays.length > 0) {
            registrosArray = possibleArrays[0];
          }
        }
        
        console.log('📊 Array de registros extraído:', registrosArray);
        
        if (!Array.isArray(registrosArray)) {
          console.log('⚠️ No se encontraron registros válidos, usando array vacío');
          registrosArray = [];
        }
        
        // Formatear registros correctamente
        const registrosFormateados = registrosArray.map((registro, index) => {
          try {
            const fechaObj = new Date(registro.fecha);
            
            if (isNaN(fechaObj.getTime())) {
              console.warn(`⚠️ Fecha inválida en registro ${index}:`, registro.fecha);
              fechaObj.setTime(Date.now());
            }
            
            return {
              ...registro,
              fechaObj: fechaObj,
              fecha: fechaObj.toLocaleDateString('es-MX', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
              }),
              horasRealizadas: registro.horasRealizadas?.toString() || '0.00',
              evidencias: Array.isArray(registro.evidencias) ? registro.evidencias : []
            };
          } catch (error) {
            console.error(`❌ Error procesando registro ${index}:`, error, registro);
            return {
              ...registro,
              fechaObj: new Date(),
              fecha: new Date().toLocaleDateString('es-MX'),
              horasRealizadas: '0.00',
              evidencias: []
            };
          }
        });
        
        // Ordenar por fecha descendente
        registrosFormateados.sort((a, b) => b.fechaObj - a.fechaObj);
        
        console.log('✅ Registros formateados correctamente:', registrosFormateados);
        setRegistrosHistorial(registrosFormateados);
        
      } catch (error) {
        console.error('❌ Error al cargar registros:', error);
        setError(`Error al cargar el historial: ${error.message}`);
        setRegistrosHistorial([]);
      } finally {
        setLoadingRegistros(false);
      }
    };

    cargarRegistros();
  }, [currentUser?._id]);

  // Establecer fecha de inicio al primer registro - MEJORADO
  useEffect(() => {
    if (registrosHistorial.length > 0 && !fechaInicioServicio) {
      const registrosOrdenados = [...registrosHistorial].sort((a, b) => a.fechaObj - b.fechaObj);
      setFechaInicioServicio(registrosOrdenados[0].fechaObj);
      console.log('📅 Fecha de inicio del servicio establecida:', registrosOrdenados[0].fechaObj);
    }
  }, [registrosHistorial, fechaInicioServicio]);

  // Función para mostrar el diálogo
  const showConfirmDialog = (type) => {
    setDialogType(type);
    setOpenDialog(true);
  };

  // Función para manejar la confirmación del diálogo
  const handleConfirm = async () => {
    setIsSubmitting(true);
    setError('');

    if (dialogType === 'start') {
      const ahora = new Date();
      const hora = ahora.getHours().toString().padStart(2, '0');
      const minutos = ahora.getMinutes().toString().padStart(2, '0');
      setHoraEntrada(`${hora}:${minutos}`);
      setSesionIniciada(true);
      setSesionFinalizada(false);
      setTiempoAcumulado('0 horas y 0 minutos');
      setIsSubmitting(false);
    } else if (dialogType === 'end') {
      if (!actividades.trim()) {
        setError("Llena el apartado 'Actividades realizadas' para poder continuar");
        setIsSubmitting(false);
        return;
      }

      try {
        const ahora = new Date();
        const horaSalida = `${ahora.getHours().toString().padStart(2, '0')}:${ahora.getMinutes().toString().padStart(2, '0')}`;
        
        let horasTrabajadas = 0;
        if (horaEntrada !== '--:--') {
          const [horaEntradaHoras, minutosEntrada] = horaEntrada.split(':').map(x => parseInt(x));
          const [horaSalidaHora, horaSalidaMinutos] = horaSalida.split(':').map(x => parseInt(x));
          horasTrabajadas = (horaSalidaHora - horaEntradaHoras) + (horaSalidaMinutos - minutosEntrada) / 60;
        }

        const formData = new FormData();
        formData.append('fecha', ahora.toISOString());
        formData.append('horaEntrada', horaEntrada);
        formData.append('horaSalida', horaSalida);
        formData.append('horasRealizadas', horasTrabajadas.toFixed(2));
        formData.append('descripcion', actividades);

        evidencias.forEach(file => {
          formData.append('evidencias', file);
        });

        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error('No hay token de autenticación');
        }

        const response = await fetch('http://localhost:3001/api/records/create', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || 'Error al guardar el registro');
        }

        console.log('✅ Registro guardado exitosamente:', data.data);

        const fechaObj = new Date(data.data.fecha);
        const nuevoRegistro = {
          ...data.data,
          fechaObj: fechaObj,
          fecha: fechaObj.toLocaleDateString('es-MX', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
          }),
          horasRealizadas: data.data.horasRealizadas?.toString() || horasTrabajadas.toFixed(2),
          evidencias: data.data.evidencias || []
        };
        
        setRegistrosHistorial(prev => [nuevoRegistro, ...prev]);
        setSesionIniciada(false);
        setSesionFinalizada(true);
        setHoraSalida(horaSalida);
        const horasEnteras = Math.floor(horasTrabajadas);
        const minutosDecimal = (horasTrabajadas - horasEnteras) * 60;
        const minutos = Math.round(minutosDecimal);
        setTiempoAcumulado(`${horasEnteras} horas y ${minutos} minutos`);
        setActividades('');
        setEvidencias([]);

      } catch (error) {
        console.error('❌ Error al guardar registro:', error);
        setError(error.message || 'Error al guardar el registro. Por favor intenta de nuevo.');
      } finally {
        setIsSubmitting(false);
      }
    }
    setOpenDialog(false);
  };

  // Calcular el total de horas
  const totalHoras = useCallback(() => {
    if (!Array.isArray(registrosHistorial) || registrosHistorial.length === 0) {
      return '0 horas y 0 minutos';
    }

    const total = registrosHistorial.reduce((sum, registro) => {
      const horas = parseFloat(registro.horasRealizadas) || 0;
      return sum + horas;
    }, 0);
    
    if (total >= 500 && !fechaFinServicio) {
      const registrosOrdenados = [...registrosHistorial].sort((a, b) => b.fechaObj - a.fechaObj);
      if (registrosOrdenados.length > 0) {
        setFechaFinServicio(registrosOrdenados[0].fechaObj);
        console.log('🎉 ¡500 horas completadas! Fecha de fin:', registrosOrdenados[0].fechaObj);
      }
    }
    
    const horasEnteras = Math.floor(total);
    const minutosDecimal = (total - horasEnteras) * 60;
    const minutos = Math.round(minutosDecimal);
    
    return `${horasEnteras} horas y ${minutos} minutos`;
  }, [registrosHistorial, fechaFinServicio]);

  // Manejo de evidencias
  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    setEvidencias(prev => [...prev, ...files]);
  };

  const removeEvidencia = (index) => {
    setEvidencias(prev => prev.filter((_, i) => i !== index));
  };

  // Función para obtener el ícono según el tipo de archivo
  const getFileIcon = (fileName) => {
    const extension = fileName.split('.').pop().toLowerCase();
    const iconMap = {
      pdf: <Description color="error" />,
      doc: <Description color="primary" />,
      docx: <Description color="primary" />,
      jpg: <Image color="success" />,
      jpeg: <Image color="success" />,
      png: <Image color="success" />,
      gif: <Image color="success" />,
      mp4: <VideoFile color="secondary" />,
      mov: <VideoFile color="secondary" />,
      mp3: <AudioFile color="warning" />,
      wav: <AudioFile color="warning" />,
      zip: <Archive color="action" />,
      rar: <Archive color="action" />
    };
    
    return iconMap[extension] || <InsertDriveFile />;
  };

  const iniciarContador = () => {
    showConfirmDialog('start');
  };

  const finalizarServicio = () => {
    if (!actividades.trim()) {
      setError("Llena el apartado 'Actividades realizadas' para poder continuar");
      return;
    }
    showConfirmDialog('end');
  };

  // Calcular tiempo transcurrido en tiempo real
  const getTiempoTranscurrido = () => {
    if (horaEntrada === '--:--') return '0 horas y 0 minutos';
    const ahora = new Date();
    const [horaEntradaHoras, minutosEntrada] = horaEntrada.split(':').map(x => parseInt(x));
    const horasTranscurridas = ahora.getHours() - horaEntradaHoras;
    const minutosTranscurridos = ahora.getMinutes() - minutosEntrada;
    const totalMinutos = horasTranscurridas * 60 + minutosTranscurridos;
    const horas = Math.floor(totalMinutos / 60);
    const minutos = totalMinutos % 60;
    return `${horas} horas y ${minutos} minutos`;
  };

  // Función para manejar la selección de fecha en el calendario
  const handleFechaSeleccionada = useCallback((fecha) => {
    console.log('📅 Fecha seleccionada en calendario:', fecha);
    setFechaSeleccionada(fecha);
    
    const registro = registrosHistorial.find(reg => {
      const regFecha = reg.fechaObj;
      const mismaFecha = regFecha.getDate() === fecha.getDate() && 
                        regFecha.getMonth() === fecha.getMonth() && 
                        regFecha.getFullYear() === fecha.getFullYear();
      return mismaFecha;
    });
    
    console.log('🔍 Registro encontrado para la fecha:', registro);

    if (registro) {
      const evidenciasFormateadas = registro.evidencias.map(evidencia => ({
        ...evidencia,
        nombre: evidencia.nombre || evidencia.ruta.split('/').pop()
      }));

      const registroFormateado = {
        ...registro,
        evidencias: evidenciasFormateadas
      };

      setRegistroSeleccionado(registroFormateado);
    } else {
      setRegistroSeleccionado(null);
    }
    
    setMostrarTabla(false);
    setMostrarDetalle(true);
  }, [registrosHistorial]);

  const volverATabla = () => {
    setMostrarTabla(true);
    setMostrarDetalle(false);
    setFechaSeleccionada(null);
    setRegistroSeleccionado(null);
  };

  const tileClassName = useCallback(({ date, view }) => {
    if (view === 'month') {
      const clases = [];
      
      const tieneRegistro = registrosHistorial.some(registro => {
        const regFecha = registro.fechaObj;
        return regFecha.getDate() === date.getDate() && 
              regFecha.getMonth() === date.getMonth() && 
              regFecha.getFullYear() === date.getFullYear();
      });
      if (tieneRegistro) clases.push('fecha-con-registro');
      
      if (fechaInicioServicio && 
          fechaInicioServicio.getDate() === date.getDate() && 
          fechaInicioServicio.getMonth() === date.getMonth() && 
          fechaInicioServicio.getFullYear() === date.getFullYear()) {
        clases.push('fecha-inicio-servicio');
      }
      
      if (fechaFinServicio && 
          fechaFinServicio.getDate() === date.getDate() && 
          fechaFinServicio.getMonth() === date.getMonth() && 
          fechaFinServicio.getFullYear() === date.getFullYear()) {
        clases.push('fecha-fin-servicio');
      }
      
      return clases.join(' ');
    }
  }, [registrosHistorial, fechaInicioServicio, fechaFinServicio]);

  const formatearFecha = useCallback((fecha) => {
    if (!fecha) return '';
    
    const dias = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
    
    return `${dias[fecha.getDay()]}, ${fecha.getDate()} de ${meses[fecha.getMonth()]} de ${fecha.getFullYear()}`;
  }, []);

  // Limpieza de recursos
  useEffect(() => {
    return () => {
      registrosHistorial.forEach(registro => {
        registro.evidencias?.forEach(evidencia => {
          if (evidencia.url?.startsWith('blob:')) {
            URL.revokeObjectURL(evidencia.url);
          }
        });
      });
    };
  }, [registrosHistorial]);

  useEffect(() => {
    const timer = setTimeout(() => {
      setOpenWelcome(false);
    }, 5000);

    return () => clearTimeout(timer);
  }, []);

  // Mostrar loading mientras se cargan los datos
  if (loading || !userReady || loadingRegistros) {
    return (
      <Box 
        display="flex" 
        flexDirection="column"
        justifyContent="center" 
        alignItems="center" 
        height="100vh"
        gap={2}
      >
        <CircularProgress size={60} />
        <Typography variant="h6">
          {loading ? 'Cargando datos del usuario...' : 
           loadingRegistros ? 'Cargando historial de registros...' : 
           'Preparando interfaz...'}
        </Typography>
        <Typography variant="body2" color="textSecondary">
          {loading ? 'Cargando usuario...' : 
           loadingRegistros ? 'Obteniendo registros de la base de datos...' :
           'Preparando interfaz...'}
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header del usuario */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Grid container spacing={3} alignItems="center">
            <Grid item>
              <Avatar
                key={`user-${currentUser?._id}-${currentUser?.fotoPerfil}`}
                src={currentUser?.fotoPerfil && currentUser.fotoPerfil !== '' 
                  ? `http://localhost:3001/uploads/perfiles/${currentUser.fotoPerfil}?t=${Date.now()}`
                  : 'http://localhost:3001/uploads/perfiles/2138822222222_1749571359362.png'
                }
                alt={`Foto de perfil de ${currentUser?.nombre || 'Usuario'}`}
                sx={{ width: 80, height: 80 }}
              />
            </Grid>
            <Grid item xs>
              <Typography variant="h5" gutterBottom>
                {`${currentUser?.nombre || ''} ${currentUser?.apellidoPaterno || ''} ${currentUser?.apellidoMaterno || ''}`}
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <Typography variant="body2">
                    <strong>Número de Control:</strong> {currentUser?.numeroControl}
                  </Typography>
                  <Typography variant="body2">
                    <strong>Correo:</strong> {currentUser?.email}
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <Typography variant="body2">
                    <strong>Carrera:</strong> {currentUser?.carrera?.nombre}
                  </Typography>
                  <Typography variant="body2">
                    <strong>Semestre:</strong> {currentUser?.semestre}°
                  </Typography>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      <Typography variant="h4" gutterBottom>
        Registro de Horas de Servicio Social
      </Typography>

      {/* Snackbar para errores */}
      <Snackbar 
        open={!!error} 
        autoHideDuration={6000} 
        onClose={() => setError('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>

      {/* Mensaje de bienvenida */}
      <Snackbar 
        open={openWelcome && !!currentUser} 
        autoHideDuration={5000} 
        onClose={() => setOpenWelcome(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert severity="success">
          ¡Bienvenido(a) {`${currentUser?.nombre} ${currentUser?.apellidoPaterno}`}! Iniciaste sesión correctamente.
        </Alert>
      </Snackbar>

      {/* Contenedor principal */}
      <Grid container spacing={3}>
        {/* Sesión Actual */}
        <Grid item xs={12} lg={8}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <AccessTime />
                Sesión Actual
              </Typography>
              
              {/* Estado de conexión */}
              <Box sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                <Box sx={{ width: 8, height: 8, borderRadius: '50%', bgcolor: 'success.main' }} />
                <Typography variant="body2" color="textSecondary">
                  Conectado a la red
                </Typography>
              </Box>

              {/* Información de la sesión */}
              <TableContainer component={Paper} variant="outlined" sx={{ mb: 3 }}>
                <Table size="small">
                  <TableBody>
                    <TableRow>
                      <TableCell><strong>Fecha:</strong></TableCell>
                      <TableCell>{new Date().toLocaleDateString('es-MX')}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell><strong>Hora de entrada:</strong></TableCell>
                      <TableCell>{horaEntrada}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell><strong>Hora de salida:</strong></TableCell>
                      <TableCell>{horaSalida}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell><strong>Tiempo acumulado:</strong></TableCell>
                      <TableCell>{tiempoAcumulado}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell><strong>Total horas acumuladas:</strong></TableCell>
                      <TableCell>{totalHoras()}</TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>

              {/* Botones de actividades y evidencias */}
              <Box sx={{ mb: 3 }}>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <Tooltip 
                      title={!sesionIniciada ? "Primero debes iniciar el registro de horas" : ""}
                      placement="top"
                    >
                      <Box>
                        <Button
                          variant="outlined"
                          startIcon={<Assignment />}
                          fullWidth
                          onClick={() => sesionIniciada && setOpenActividades(true)}
                          disabled={!sesionIniciada}
                          sx={{ py: 1.5 }}
                        >
                          Agregar actividades realizadas
                        </Button>
                      </Box>
                    </Tooltip>
                    {actividades && (
                      <Paper variant="outlined" sx={{ p: 2, mt: 1 }}>
                        <Typography variant="body2" color="textSecondary" gutterBottom>
                          <strong>Actividades registradas:</strong>
                        </Typography>
                        <Typography variant="body2">
                          {actividades.substring(0, 100)}{actividades.length > 100 ? '...' : ''}
                        </Typography>
                      </Paper>
                    )}
                  </Grid>
                  
                  <Grid item xs={12} sm={6}>
                    <Tooltip 
                      title={!sesionIniciada ? "Primero debes iniciar el registro de horas" : ""}
                      placement="top"
                    >
                      <Box>
                        <Button
                          variant="outlined"
                          startIcon={<AttachFile />}
                          fullWidth
                          onClick={() => sesionIniciada && fileInputRef.current.click()}
                          disabled={!sesionIniciada}
                          sx={{ py: 1.5 }}
                        >
                          Agregar evidencia
                        </Button>
                      </Box>
                    </Tooltip>
                    <input
                      type="file"
                      ref={fileInputRef}
                      onChange={handleFileChange}
                      accept="*/*"
                      multiple
                      style={{ display: 'none' }}
                      disabled={!sesionIniciada}
                    />
                    {evidencias.length > 0 && (
                      <Box sx={{ mt: 1 }}>
                        {evidencias.map((evidencia, index) => (
                          <Chip
                            key={index}
                            icon={getFileIcon(evidencia.name)}
                            label={evidencia.name.length > 20 
                              ? evidencia.name.substring(0, 20) + '...' 
                              : evidencia.name}
                            onDelete={() => removeEvidencia(index)}
                            variant="outlined"
                            size="small"
                            sx={{ mr: 1, mb: 1 }}
                          />
                        ))}
                      </Box>
                    )}
                  </Grid>
                </Grid>
              </Box>

              {/* Botones de control */}
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
                {!sesionIniciada && !sesionFinalizada && (
                  <Fab
                    variant="extended"
                    color="primary"
                    onClick={iniciarContador}
                    disabled={isSubmitting}
                    sx={{ px: 4 }}
                  >
                    <PlayArrow sx={{ mr: 1 }} />
                    Iniciar registro de horas
                  </Fab>
                )}

                {sesionIniciada && (
                  <Fab
                    variant="extended"
                    color="secondary"
                    onClick={finalizarServicio}
                    disabled={isSubmitting || !actividades.trim()}
                    sx={{ px: 4 }}
                  >
                    <Stop sx={{ mr: 1 }} />
                    {isSubmitting ? <CircularProgress size={20} sx={{ mr: 1 }} /> : null}
                    Finalizar servicio
                  </Fab>
                )}
              </Box>

              {/* Mostrar tiempo en tiempo real cuando la sesión está iniciada */}
              {sesionIniciada && (
                <Box sx={{ mt: 2, textAlign: 'center' }}>
                  <Typography variant="h6" color="primary">
                    Tiempo transcurrido: {getTiempoTranscurrido()}
                  </Typography>
                  <LinearProgress 
                    variant="indeterminate" 
                    sx={{ mt: 1, height: 4, borderRadius: 2 }}
                  />
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Panel de Información y Progreso */}
        <Grid item xs={12} lg={4}>
          <Card sx={{ mb: 2 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <CalendarToday />
                Progreso del Servicio Social
              </Typography>
              
              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  Horas completadas
                </Typography>
                <LinearProgress 
                  variant="determinate" 
                  value={Math.min((parseFloat(totalHoras().split(' ')[0]) / 500) * 100, 100)}
                  sx={{ height: 8, borderRadius: 4 }}
                />
                <Typography variant="body2" sx={{ mt: 1 }}>
                  {totalHoras()} de 500 horas ({Math.min(Math.round((parseFloat(totalHoras().split(' ')[0]) / 500) * 100), 100)}%)
                </Typography>
              </Box>

              <Divider sx={{ my: 2 }} />

              <Box>
                <Typography variant="body2" color="textSecondary" gutterBottom>
                  <strong>Estadísticas:</strong>
                </Typography>
                <Typography variant="body2">
                  • Total de registros: {registrosHistorial.length}
                </Typography>
                <Typography variant="body2">
                  • Días trabajados: {registrosHistorial.length}
                </Typography>
                {fechaInicioServicio && (
                  <Typography variant="body2">
                    • Inicio del servicio: {fechaInicioServicio.toLocaleDateString('es-MX')}
                  </Typography>
                )}
                {fechaFinServicio && (
                  <Typography variant="body2" sx={{ color: 'success.main', fontWeight: 'bold' }}>
                    • ¡Servicio completado! ({fechaFinServicio.toLocaleDateString('es-MX')})
                  </Typography>
                )}
              </Box>
            </CardContent>
          </Card>

          {/* Actividades recientes */}
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Actividades Recientes
              </Typography>
              {registrosHistorial.slice(0, 3).map((registro, index) => (
                <Box key={index} sx={{ mb: 2 }}>
                  <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                    {registro.fecha}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    {registro.descripcion?.substring(0, 80)}...
                  </Typography>
                  <Typography variant="caption" color="primary">
                    {registro.horasRealizadas} horas
                  </Typography>
                  {index < 2 && <Divider sx={{ mt: 1 }} />}
                </Box>
              ))}
            </CardContent>
          </Card>
        </Grid>

        {/* Historial de sesiones */}
        <Grid item xs={12}>
          <Card sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Historial de Registros
              </Typography>
              <SessionHistory
                registros={registrosHistorial}
                loading={loadingRegistros}
                onFechaSeleccionada={handleFechaSeleccionada}
                mostrarTabla={mostrarTabla}
                mostrarDetalle={mostrarDetalle}
                registroSeleccionado={registroSeleccionado}
                fechaSeleccionada={fechaSeleccionada}
                volverATabla={volverATabla}
                tileClassName={tileClassName}
                formatearFecha={formatearFecha}
                fechaInicioServicio={fechaInicioServicio}
                fechaFinServicio={fechaFinServicio}
              />
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Diálogo de confirmación */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>
          {dialogType === 'start' ? 'Iniciar Registro de Horas' : 'Finalizar Servicio'}
        </DialogTitle>
        <DialogContent>
          <Typography>
            {dialogType === 'start' 
              ? '¿Estás seguro(a) que deseas iniciar el registro de horas de servicio social?' 
              : '¿Estás seguro(a) que deseas finalizar el servicio del día de hoy?'
            }
          </Typography>
          {dialogType === 'end' && (
            <Typography sx={{ mt: 1, color: 'text.secondary' }}>
              Se guardará el registro con las actividades y evidencias que hayas agregado.
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)} disabled={isSubmitting}>
            Cancelar
          </Button>
          <Button 
            onClick={handleConfirm} 
            variant="contained" 
            disabled={isSubmitting}
            startIcon={isSubmitting ? <CircularProgress size={16} /> : null}
          >
            {isSubmitting ? 'Procesando...' : 'Confirmar'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Diálogo para actividades */}
      <Dialog 
        open={openActividades} 
        onClose={() => setOpenActividades(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Actividades Realizadas
        </DialogTitle>
        <DialogContent>
          <TextField
            multiline
            rows={6}
            fullWidth
            variant="outlined"
            placeholder="Describe las actividades que realizaste durante tu servicio social..."
            value={actividades}
            onChange={(e) => setActividades(e.target.value)}
            sx={{ mt: 1 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenActividades(false)}>
            Cancelar
          </Button>
          <Button 
            onClick={() => setOpenActividades(false)} 
            variant="contained"
            disabled={!actividades.trim()}
          >
            <Save sx={{ mr: 1 }} />
            Guardar
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ActiveSession;