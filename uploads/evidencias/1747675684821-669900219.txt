import React, { useState, useRef, useEffect, useCallback } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';

const ActiveSession = () => {
  // Estados para la sesi√≥n actual
  const [actividades, setActividades] = useState('');
  const [horaEntrada, setHoraEntrada] = useState('--:--');
  const [horaSalida, setHoraSalida] = useState('--:--');
  const [tiempoAcumulado, setTiempoAcumulado] = useState('0.00 horas');
  const [sesionIniciada, setSesionIniciada] = useState(false);
  const [sesionFinalizada, setSesionFinalizada] = useState(false);
  const [evidencias, setEvidencias] = useState([]);
  const fileInputRef = useRef(null);
  
  // Estados para el historial
  const [fechaSeleccionada, setFechaSeleccionada] = useState(null);
  const [mostrarTabla, setMostrarTabla] = useState(true);
  const [mostrarDetalle, setMostrarDetalle] = useState(false);
  const [registroSeleccionado, setRegistroSeleccionado] = useState(null);
  const [fechaInicioServicio, setFechaInicioServicio] = useState(null);
  const [fechaFinServicio, setFechaFinServicio] = useState(null);
  
  // Estado para los registros
  const [registrosHistorial, setRegistrosHistorial] = useState([
    {
      fecha: '10/05/2025',
      fechaObj: new Date(2025, 4, 10),
      horaEntrada: '09:00',
      horaSalida: '13:00',
      horasRealizadas: '4.00',
      descripcion: 'Desarrollo de interfaz de usuario y correcci√≥n de errores en m√≥dulo de reportes',
      evidencias: [
        { name: 'documento.pdf', url: '/api/placeholder/documento.pdf' },
        { name: 'foto_evidencia.jpg', url: '/api/placeholder/foto_evidencia.jpg' }
      ]
    },
    {
      fecha: '11/05/2025',
      fechaObj: new Date(2025, 4, 11),
      horaEntrada: '10:30',
      horaSalida: '14:30',
      horasRealizadas: '4.00',
      descripcion: 'Implementaci√≥n de caracter√≠sticas de filtrado y b√∫squeda avanzada',
      evidencias: [
        { name: 'presentacion.pptx', url: '/api/placeholder/presentacion.pptx' },
        { name: 'video_explicativo.mp4', url: '/api/placeholder/video_explicativo.mp4' }
      ]
    }
  ]);

  // Calcular el total de horas y verificar si se completaron 500 horas
  const totalHoras = useCallback(() => {
    const total = registrosHistorial.reduce((sum, registro) => {
      return sum + parseFloat(registro.horasRealizadas);
    }, 0);
    
    // Verificar si se completaron 500 horas
    if (total >= 500 && !fechaFinServicio) {
      const ultimoRegistro = [...registrosHistorial].pop();
      if (ultimoRegistro) {
        setFechaFinServicio(ultimoRegistro.fechaObj);
      }
    }
    
    return total.toFixed(2);
  }, [registrosHistorial, fechaFinServicio]);

  // Establecer fecha de inicio al primer registro
  useEffect(() => {
    if (registrosHistorial.length > 0 && !fechaInicioServicio) {
      setFechaInicioServicio(registrosHistorial[0].fechaObj);
    }
  }, [registrosHistorial, fechaInicioServicio]);

  // Manejo de evidencias (acepta todos los tipos de archivos)
  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    setEvidencias(prev => [...prev, ...files]);
  };

  const removeEvidencia = (index) => {
    setEvidencias(prev => prev.filter((_, i) => i !== index));
  };

  // Funci√≥n para obtener el √≠cono seg√∫n el tipo de archivo
  const getFileIcon = (fileName) => {
    const extension = fileName.split('.').pop().toLowerCase();
    const iconMap = {
      // Documentos
      pdf: 'üìÑ',
      doc: 'üìù',
      docx: 'üìù',
      odt: 'üìù',
      // Hojas de c√°lculo
      xls: 'üìä',
      xlsx: 'üìä',
      csv: 'üìä',
      ods: 'üìä',
      // Presentaciones
      ppt: 'üìë',
      pptx: 'üìë',
      odp: 'üìë',
      // Im√°genes
      jpg: 'üñºÔ∏è',
      jpeg: 'üñºÔ∏è',
      png: 'üñºÔ∏è',
      gif: 'üñºÔ∏è',
      webp: 'üñºÔ∏è',
      svg: 'üñºÔ∏è',
      // Videos
      mp4: 'üé¨',
      mov: 'üé¨',
      avi: 'üé¨',
      mkv: 'üé¨',
      webm: 'üé¨',
      // Audio
      mp3: 'üéµ',
      wav: 'üéµ',
      ogg: 'üéµ',
      // Otros
      txt: 'üìã',
      zip: 'üóúÔ∏è',
      rar: 'üóúÔ∏è',
      '7z': 'üóúÔ∏è'
    };
    
    return iconMap[extension] || 'üìÅ';
  };

  // Funci√≥n para iniciar el contador de horas
  const iniciarContador = () => {
    const mensaje = "Al iniciar el contador de horas tu tiempo empezar√° a ser contado y no podr√° ser corregido. Si lo iniciaste antes de tiempo, solicita ayuda a tu administrador para corregir tu hora.";
    
    if(window.confirm(mensaje)) {
      const ahora = new Date();
      const hora = ahora.getHours().toString().padStart(2, '0');
      const minutos = ahora.getMinutes().toString().padStart(2, '0');
      setHoraEntrada(`${hora}:${minutos}`);
      setSesionIniciada(true);
      setSesionFinalizada(false);
      setTiempoAcumulado('0.00 horas');
    }
  };

  // Funci√≥n para finalizar el servicio diario
  const finalizarServicio = () => {
    if (!actividades.trim()) {
      alert("Llena el apartado 'Actividades realizadas' para poder continuar");
      return;
    }

    const mensaje = "Al presionar este bot√≥n finalizar√°s el conteo de tus horas diarias de servicio y no podr√°s volver a iniciarlo. ¬øDeseas finalizar el conteo de horas de servicio?";
    
    if(window.confirm(mensaje)) {
      const ahora = new Date();
      const hora = ahora.getHours().toString().padStart(2, '0');
      const minutos = ahora.getMinutes().toString().padStart(2, '0');
      setHoraSalida(`${hora}:${minutos}`);
      
      let horasTrabajadas = 0;
      if (horaEntrada !== '--:--') {
        const entrada = horaEntrada.split(':');
        const salida = `${hora}:${minutos}`.split(':');
        horasTrabajadas = (parseInt(salida[0]) - parseInt(entrada[0])) + 
                         (parseInt(salida[1]) - parseInt(entrada[1])) / 60;
        setTiempoAcumulado(`${horasTrabajadas.toFixed(2)} horas`);
      }
      
      // Crear nuevo registro
      const nuevoRegistro = {
        fecha: ahora.toLocaleDateString('es-MX'),
        fechaObj: ahora,
        horaEntrada: horaEntrada,
        horaSalida: `${hora}:${minutos}`,
        horasRealizadas: horasTrabajadas.toFixed(2),
        descripcion: actividades,
        evidencias: evidencias.map(file => ({
          name: file.name,
          url: URL.createObjectURL(file)
        }))
      };
      
      // Agregar al historial
      setRegistrosHistorial(prev => [...prev, nuevoRegistro]);
      
      setSesionIniciada(false);
      setSesionFinalizada(true);
      setActividades('');
      setEvidencias([]);
    }
  };

  // Funci√≥n para manejar la selecci√≥n de fecha en el calendario
  const handleFechaSeleccionada = useCallback((fecha) => {
    setFechaSeleccionada(fecha);
    
    const registro = registrosHistorial.find(reg => {
      const regFecha = reg.fechaObj;
      return regFecha.getDate() === fecha.getDate() && 
             regFecha.getMonth() === fecha.getMonth() && 
             regFecha.getFullYear() === fecha.getFullYear();
    });
    
    setRegistroSeleccionado(registro || null);
    setMostrarTabla(false);
    setMostrarDetalle(true);
  }, [registrosHistorial]);

  const volverATabla = () => {
    setMostrarTabla(true);
    setMostrarDetalle(false);
    setFechaSeleccionada(null);
  };

  // Funci√≥n para marcar fechas especiales en el calendario
  const tileClassName = useCallback(({ date, view }) => {
    if (view === 'month') {
      const clases = [];
      
      // Fechas con registros
      const tieneRegistro = registrosHistorial.some(registro => {
        const regFecha = registro.fechaObj;
        return regFecha.getDate() === date.getDate() && 
               regFecha.getMonth() === date.getMonth() && 
               regFecha.getFullYear() === date.getFullYear();
      });
      if (tieneRegistro) clases.push('fecha-con-registro');
      
      // Fecha de inicio
      if (fechaInicioServicio && 
          fechaInicioServicio.getDate() === date.getDate() && 
          fechaInicioServicio.getMonth() === date.getMonth() && 
          fechaInicioServicio.getFullYear() === date.getFullYear()) {
        clases.push('fecha-inicio-servicio');
      }
      
      // Fecha de fin (500 horas completadas)
      if (fechaFinServicio && 
          fechaFinServicio.getDate() === date.getDate() && 
          fechaFinServicio.getMonth() === date.getMonth() && 
          fechaFinServicio.getFullYear() === date.getFullYear()) {
        clases.push('fecha-fin-servicio');
      }
      
      return clases.join(' ');
    }
  }, [registrosHistorial, fechaInicioServicio, fechaFinServicio]);

  // Funci√≥n para formatear la fecha en formato legible
  const formatearFecha = useCallback((fecha) => {
    if (!fecha) return '';
    
    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
    
    return `${dias[fecha.getDay()]}, ${fecha.getDate()} de ${meses[fecha.getMonth()]} de ${fecha.getFullYear()}`;
  }, []);

  // Limpieza de recursos
  useEffect(() => {
    return () => {
      registrosHistorial.forEach(registro => {
        registro.evidencias?.forEach(evidencia => {
          if (evidencia.url?.startsWith('blob:')) {
            URL.revokeObjectURL(evidencia.url);
          }
        });
      });
    };
  }, [registrosHistorial]);

  return (
    <div className="active-session">
      <h1>--</h1>
      <h1>Registro de Horas de Servicio</h1>
      
      <div className="session-table-container">
        <div className="connection-status">
          <span className="status-dot"></span>
          <span>Conectado a la red</span>
        </div>
        
        <table className="session-table">
          <thead>
            <tr>
              <th colSpan="2">Sesi√≥n Actual</th>
              <th>Historial de Registros</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colSpan="2">
                <div className="session-details">
                  <div className="session-info">
                    <table className="info-table">
                      <tbody>
                        <tr>
                          <td><strong>Fecha:</strong></td>
                          <td>{new Date().toLocaleDateString('es-MX')}</td>
                        </tr>
                        <tr>
                          <td><strong>Hora de entrada:</strong></td>
                          <td>{horaEntrada}</td>
                        </tr>
                        <tr>
                          <td><strong>Hora de salida:</strong></td>
                          <td>{horaSalida}</td>
                        </tr>
                        <tr>
                          <td><strong>Tiempo acumulado:</strong></td>
                          <td>{tiempoAcumulado}</td>
                        </tr>
                        <tr>
                          <td><strong>Total horas acumuladas:</strong></td>
                          <td>{totalHoras()} horas</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  
                  <div className="session-activity">
                    <div><strong>Actividades realizadas:</strong></div>
                    <textarea 
                      value={actividades}
                      onChange={(e) => setActividades(e.target.value)}
                      placeholder="Describe detalladamente las actividades realizadas durante tu servicio"
                      required
                    />
                  </div>
                  
                  <div className="evidence-section">
                    <div><strong>Evidencias (Archivos):</strong></div>
                    <div className="evidence-upload">
                      <button 
                        className="upload-button"
                        onClick={() => fileInputRef.current.click()}
                      >
                        + Agregar evidencia
                      </button>
                      <input
                        type="file"
                        ref={fileInputRef}
                        onChange={handleFileChange}
                        accept="*/*"
                        multiple
                        style={{ display: 'none' }}
                      />
                      <div className="evidence-preview">
                        {evidencias.map((evidencia, index) => (
                          <div key={index} className="evidence-item">
                            <span>
                              {getFileIcon(evidencia.name)} {evidencia.name}
                            </span>
                            <button 
                              className="remove-evidence"
                              onClick={() => removeEvidencia(index)}
                            >
                              √ó
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  <div className="session-status">
                    {sesionFinalizada ? 'Sesi√≥n finalizada' : 
                     sesionIniciada ? 'Sesi√≥n en progreso' : 'No hay horas registradas hoy'}
                    {fechaFinServicio && <div className="servicio-completado">¬°Servicio social completado!</div>}
                  </div>
                  
                  <div className="button-group">
                    {!sesionIniciada && !sesionFinalizada && !fechaFinServicio && (
                      <button 
                        className="start-button"
                        onClick={iniciarContador}
                      >
                        Registrar Hora de Entrada
                      </button>
                    )}
                    
                    {sesionIniciada && !sesionFinalizada && (
                      <button 
                        className="stop-button"
                        onClick={finalizarServicio}
                      >
                        Finalizar servicio diario
                      </button>
                    )}
                  </div>
                </div>
              </td>
              <td>
                <div className="history-container">
                  {mostrarTabla && (
                    <div className="calendar-section">
                      <Calendar
                        onChange={handleFechaSeleccionada}
                        value={fechaSeleccionada}
                        locale="es"
                        formatShortWeekday={(locale, date) => 
                          ['D', 'L', 'M', 'M', 'J', 'V', 'S'][date.getDay()]
                        }
                        formatMonthYear={(locale, date) => {
                          const months = [
                            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
                          ];
                          return `${months[date.getMonth()]} ${date.getFullYear()}`;
                        }}
                        tileClassName={tileClassName}
                      />
                      
                      <div className="calendar-info">
                        Selecciona una fecha para ver detalles
                      </div>
                      
                      {/* Leyenda de colores del calendario */}
                      <div className="calendar-legend">
                        <div className="legend-item">
                          <span className="legend-color fecha-con-registro"></span>
                          <span>D√≠as con registro</span>
                        </div>
                        <div className="legend-item">
                          <span className="legend-color fecha-inicio-servicio"></span>
                          <span>Inicio de servicio</span>
                        </div>
                        <div className="legend-item">
                          <span className="legend-color fecha-fin-servicio"></span>
                          <span>Fin de servicio (500 horas)</span>
                        </div>
                        <div className="legend-item">
                          <span className="legend-color react-calendar__tile--active"></span>
                          <span>Fecha seleccionada</span>
                        </div>
                        <div className="legend-item">
                          <span className="legend-color react-calendar__tile--now"></span>
                          <span>Hoy</span>
                        </div>
                      </div>
                      
                      {registrosHistorial.length > 0 ? (
                        <table className="history-table">
                          <thead>
                            <tr>
                              <th>Fecha</th>
                              <th>Entrada</th>
                              <th>Salida</th>
                              <th>Horas</th>
                              <th>Actividad</th>
                            </tr>
                          </thead>
                          <tbody>
                            {registrosHistorial.map((registro, index) => (
                              <tr key={index}>
                                <td>{registro.fecha}</td>
                                <td>{registro.horaEntrada}</td>
                                <td>{registro.horaSalida}</td>
                                <td>{registro.horasRealizadas}</td>
                                <td className="descripcion">{registro.descripcion}</td>
                              </tr>
                            ))}
                            <tr className="total-row">
                              <td colSpan="3"><strong>Total de horas:</strong></td>
                              <td><strong>{totalHoras()}</strong></td>
                              <td></td>
                            </tr>
                          </tbody>
                        </table>
                      ) : (
                        <div className="no-records">
                          No hay registros disponibles. Inicia tu primer registro para comenzar.
                        </div>
                      )}
                    </div>
                  )}
                  
                  {mostrarDetalle && (
                    <div className="registro-detalle">
                      <div className="registro-detalle-header">
                        <button className="volver-button" onClick={volverATabla}>
                          ‚Üê Volver
                        </button>
                        <h3>{formatearFecha(fechaSeleccionada)}</h3>
                      </div>
                      
                      {registroSeleccionado ? (
                        <div className="registro-contenido">
                          <div className="registro-info-grid">
                            <div className="registro-info-item">
                              <strong>Hora de entrada:</strong>
                              <span>{registroSeleccionado.horaEntrada}</span>
                            </div>
                            <div className="registro-info-item">
                              <strong>Hora de salida:</strong>
                              <span>{registroSeleccionado.horaSalida}</span>
                            </div>
                            <div className="registro-info-item">
                              <strong>Horas realizadas:</strong>
                              <span>{registroSeleccionado.horasRealizadas}</span>
                            </div>
                          </div>
                          
                          <div className="registro-descripcion">
                            <strong>Descripci√≥n de actividades:</strong>
                            <p>{registroSeleccionado.descripcion}</p>
                          </div>
                          
                          <div className="registro-evidencias">
                            <strong>Evidencias:</strong>
                            {registroSeleccionado.evidencias?.length > 0 ? (
                              <div className="evidencias-galeria">
                                {registroSeleccionado.evidencias.map((evidencia, index) => (
                                  <div key={index} className="evidencias-item">
                                    <div className="file-icon">{getFileIcon(evidencia.name)}</div>
                                    <div className="file-info">
                                      <span className="file-name">{evidencia.name}</span>
                                      <a 
                                        href={evidencia.url} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        className="view-file"
                                      >
                                        Ver archivo
                                      </a>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <p className="no-evidencias">No hay evidencias para esta fecha</p>
                            )}
                          </div>
                        </div>
                      ) : (
                        <div className="no-registro">
                          No hay registros para esta fecha.
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <style jsx>{`
        .active-session {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 20px;
        }
        
        h1 {
          color: #2c3e50;
          margin-bottom: 20px;
        }
        
        .session-table-container {
          position: relative;
          margin-top: 30px;
        }
        
        .connection-status {
          position: absolute;
          top: -25px;
          right: 0;
          display: flex;
          align-items: center;
          font-size: 12px;
          background-color: #f8f9fa;
          padding: 5px 10px;
          border-radius: 4px;
          border: 1px solid #ddd;
        }
        
        .status-dot {
          height: 8px;
          width: 8px;
          background-color: #4CAF50;
          border-radius: 50%;
          display: inline-block;
          margin-right: 5px;
        }
        
        .session-table {
          width: 100%;
          border-collapse: collapse;
          background-color: white;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }
        
        .session-table th, .session-table td {
          padding: 15px;
          text-align: left;
          border: 1px solid #ddd;
          vertical-align: top;
        }
        
        .session-table th {
          background-color: #f2f2f2;
          font-weight: bold;
        }
        
        .session-details {
          display: flex;
          flex-direction: column;
          gap: 15px;
        }
        
        .info-table {
          border-collapse: collapse;
          width: auto;
          margin-bottom: 10px;
          background-color: #f9f9f9;
          border: 1px solid #eee;
        }
        
        .info-table td {
          padding: 6px 10px;
          border: 1px solid #eee;
        }
        
        .info-table td:first-child {
          width: 140px;
        }
        
        .session-activity textarea {
          width: 100%;
          height: 100px;
          padding: 10px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
          resize: vertical;
          margin-top: 5px;
        }
        
        .evidence-section {
          margin-top: 10px;
        }
        
        .evidence-upload {
          margin-top: 5px;
        }
        
        .upload-button {
          background-color: #4CAF50;
          color: white;
          border: none;
          padding: 8px 12px;
          cursor: pointer;
          border-radius: 4px;
          font-size: 13px;
        }
        
        .upload-button:hover {
          background-color: #45a049;
        }
        
        .evidence-preview {
          margin-top: 10px;
          display: flex;
          flex-direction: column;
          gap: 5px;
        }
        
        .evidence-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px;
          background-color: #f5f5f5;
          border-radius: 4px;
          margin-bottom: 5px;
        }
        
        .remove-evidence {
          background-color: #f44336;
          color: white;
          border: none;
          width: 20px;
          height: 20px;
          border-radius: 50%;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .remove-evidence:hover {
          background-color: #d32f2f;
        }
        
        .session-status {
          font-style: italic;
          color: #666;
          padding: 5px 0;
        }
        
        .servicio-completado {
          color: #28a745;
          font-weight: bold;
          margin-top: 5px;
        }
        
        .history-container {
          max-height: 600px;
          overflow-y: auto;
        }
        
        .history-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 13px;
          margin-top: 15px;
        }
        
        .history-table th, .history-table td {
          padding: 8px;
          text-align: left;
          border: 1px solid #ddd;
        }
        
        .history-table th {
          background-color: #f2f2f2;
          position: sticky;
          top: 0;
        }
        
        .history-table .descripcion {
          max-width: 200px;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
        
        .total-row {
          background-color: #f2f2f2;
          font-weight: bold;
        }
        
        .no-records {
          padding: 15px;
          background-color: #f9f9f9;
          border-radius: 4px;
          color: #666;
          text-align: center;
          margin-top: 15px;
        }
        
        .button-group {
          display: flex;
          flex-direction: column;
          gap: 10px;
        }
        
        .start-button {
          background-color: #3f51b5;
          color: white;
          border: none;
          padding: 10px 15px;
          text-align: center;
          text-decoration: none;
          display: inline-block;
          font-size: 14px;
          margin-top: 10px;
          cursor: pointer;
          border-radius: 4px;
          width: 100%;
        }
        
        .start-button:hover {
          background-color: #303f9f;
        }
        
        .stop-button {
          background-color: #f44336;
          color: white;
          border: none;
          padding: 10px 15px;
          text-align: center;
          text-decoration: none;
          display: inline-block;
          font-size: 14px;
          margin-top: 10px;
          cursor: pointer;
          border-radius: 4px;
          width: 100%;
        }
        
        .stop-button:hover {
          background-color: #d32f2f;
        }

        /* Estilos para el calendario */
        .calendar-section {
          display: flex;
          flex-direction: column;
          gap: 15px;
        }
        
        .react-calendar {
          width: 100%;
          max-width: 100%;
          background: white;
          border: 1px solid #ddd;
          border-radius: 4px;
          line-height: 1.125em;
        }
        
        .react-calendar__navigation {
          height: 40px;
          margin-bottom: 10px;
        }
        
        .react-calendar__navigation button {
          min-width: 40px;
          background: none;
          font-size: 14px;
          border-radius: 4px;
        }
        
        .react-calendar__navigation button:enabled:hover,
        .react-calendar__navigation button:enabled:focus {
          background-color: #e6e6e6;
        }
        
        .react-calendar__month-view__weekdays {
          text-align: center;
          font-weight: bold;
          font-size: 12px;
          text-transform: uppercase;
        }
        
        .react-calendar__month-view__weekdays__weekday {
          padding: 0.5em;
        }
        
        .react-calendar__month-view__weekdays__weekday abbr {
          text-decoration: none;
        }
        
        .react-calendar__month-view__days__day--weekend {
          color: #d10000;
        }
        
        .react-calendar__tile {
          max-width: 100%;
          text-align: center;
          padding: 10px 0;
          background: none;
          border-radius: 4px;
        }
        
        .react-calendar__tile:enabled:hover,
        .react-calendar__tile:enabled:focus {
          background-color: #e6e6e6;
        }
        
        .react-calendar__tile--now {
          background: #ffff76;
        }
        
        .react-calendar__tile--active {
          background: #3f51b5;
          color: white;
        }
        
        .fecha-con-registro {
          background-color: #d4edda;
          color: #28a745;
          font-weight: bold;
          position: relative;
        }
        
        .fecha-con-registro::after {
          content: '';
          position: absolute;
          bottom: 3px;
          left: 50%;
          transform: translateX(-50%);
          width: 6px;
          height: 6px;
          background-color: #28a745;
          border-radius: 50%;
        }
        
        .fecha-inicio-servicio {
          background-color: #d1ecf1;
          color: #0c5460;
          font-weight: bold;
          position: relative;
        }
        
        .fecha-inicio-servicio::after {
          content: 'Inicio';
          position: absolute;
          bottom: 3px;
          left: 50%;
          transform: translateX(-50%);
          font-size: 8px;
          color: #0c5460;
        }
        
        .fecha-fin-servicio {
          background-color: #f8d7da;
          color: #721c24;
          font-weight: bold;
          position: relative;
        }
        
        .fecha-fin-servicio::after {
          content: 'Fin';
          position: absolute;
          bottom: 3px;
          left: 50%;
          transform: translateX(-50%);
          font-size: 8px;
          color: #721c24;
        }
        
        .calendar-info {
          text-align: center;
          color: #666;
          font-style: italic;
          padding: 5px;
          margin-bottom: 10px;
        }
        
        /* Leyenda del calendario */
        .calendar-legend {
          display: flex;
          flex-wrap: wrap;
          gap: 10px;
          margin-top: 15px;
          padding: 10px;
          background-color: #f8f9fa;
          border-radius: 4px;
          border: 1px solid #ddd;
        }
        
        .legend-item {
          display: flex;
          align-items: center;
          gap: 5px;
          font-size: 12px;
        }
        
        .legend-color {
          display: inline-block;
          width: 15px;
          height: 15px;
          border-radius: 3px;
        }
        
        /* Estilos para la vista de detalle */
        .registro-detalle {
          background-color: #f9f9f9;
          border-radius: 4px;
          padding: 15px;
          border: 1px solid #ddd;
        }
        
        .registro-detalle-header {
          display: flex;
          align-items: center;
          margin-bottom: 15px;
        }
        
        .registro-detalle-header h3 {
          margin: 0;
          flex: 1;
          font-size: 16px;
          color: #2c3e50;
          text-align: center;
        }
        
        .volver-button {
          background-color: #3f51b5;
          color: white;
          border: none;
          padding: 6px 12px;
          text-align: center;
          text-decoration: none;
          font-size: 12px;
          cursor: pointer;
          border-radius: 4px;
        }
        
        .volver-button:hover {
          background-color: #303f9f;
        }
        
        .registro-info-grid {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 10px;
          margin-bottom: 15px;
        }
        
        .registro-info-item {
          background-color: white;
          padding: 10px;
          border-radius: 4px;
          border: 1px solid #ddd;
          display: flex;
          flex-direction: column;
        }
        
        .registro-info-item strong {
          font-size: 12px;
          color: #666;
          margin-bottom: 5px;
        }
        
        .registro-descripcion {
          background-color: white;
          padding: 10px;
          border-radius: 4px;
          border: 1px solid #ddd;
          margin-bottom: 15px;
        }
        
        .registro-descripcion strong {
          font-size: 12px;
          color: #666;
          display: block;
          margin-bottom: 5px;
        }
        
        .registro-descripcion p {
          margin: 0;
          line-height: 1.5;
        }
        
        .registro-evidencias {
          background-color: white;
          padding: 10px;
          border-radius: 4px;
          border: 1px solid #ddd;
        }
        
        .registro-evidencias strong {
          font-size: 12px;
          color: #666;
          display: block;
          margin-bottom: 10px;
        }
        
        .evidencias-galeria {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
          gap: 10px;
        }
        
        .evidencias-item {
          display: flex;
          align-items: center;
          gap: 10px;
          padding: 10px;
          border: 1px solid #eee;
          border-radius: 4px;
        }
        
        .file-icon {
          font-size: 24px;
        }
        
        .file-info {
          display: flex;
          flex-direction: column;
        }
        
        .file-name {
          font-size: 13px;
          margin-bottom: 5px;
        }
        
        .view-file {
          font-size: 12px;
          color: #3f51b5;
          text-decoration: none;
        }
        
        .view-file:hover {
          text-decoration: underline;
        }
        
        .no-evidencias, .no-registro {
          color: #666;
          font-style: italic;
          text-align: center;
          padding: 20px;
        }
      `}</style>
    </div>
  );
};

export default ActiveSession;


import React, { useState, useRef, useEffect, useCallback, useContext } from 'react';
import { ThemeProvider } from '@mui/material/styles';
import { theme } from '../../theme/palette';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Button,
  Chip,
  Divider,
  IconButton,
  Alert,
  styled,
  Container,
  Card,
  CardContent,
  CardHeader,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  CircularProgress,
  Snackbar
} from '@mui/material';
import { 
  CloudUpload as CloudUploadIcon,
  ArrowBack as ArrowBackIcon,
  Close as CloseIcon,
  PlayArrow as PlayArrowIcon,
  Stop as StopIcon,
  InsertDriveFile as FileIcon,
  PictureAsPdf as PdfIcon,
  Image as ImageIcon,
  VideoFile as VideoIcon,
  AudioFile as AudioIcon,
  Description as DocIcon,
  Compress as CompressIcon,
  TableChart as TableChartIcon,
  Slideshow as SlideIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon
} from '@mui/icons-material';
import { AuthContext } from '../../contexts/AuthContext';

// Componentes personalizados con styled
const CalendarLegendItem = styled(Box)(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  gap: theme.spacing(1),
  fontSize: '0.75rem',
}));

const LegendColor = styled(Box)(({ color, theme }) => ({
  width: 15,
  height: 15,
  borderRadius: theme.shape.borderRadius,
  backgroundColor: color,
}));

const StatusDot = styled(Box)(({ theme }) => ({
  height: 8,
  width: 8,
  backgroundColor: theme.palette.success.main,
  borderRadius: '50%',
  marginRight: theme.spacing(1),
}));

const FilePreviewItem = styled(Paper)(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  padding: theme.spacing(1),
  marginBottom: theme.spacing(1),
  backgroundColor: theme.palette.grey[50],
}));

const UploadButton = styled(Button)(({ theme }) => ({
  marginTop: theme.spacing(1),
}));

const StyledCalendar = styled(Calendar)(({ theme }) => ({
  width: '100%',
  maxWidth: '100%',
  backgroundColor: theme.palette.background.paper,
  border: `1px solid ${theme.palette.divider}`,
  borderRadius: theme.shape.borderRadius,
  lineHeight: '1.125em',
  '& .react-calendar__navigation': {
    height: 44,
    marginBottom: theme.spacing(1),
  },
  '& .react-calendar__navigation button': {
    minWidth: 44,
    background: 'none',
    fontSize: '1rem',
    borderRadius: theme.shape.borderRadius,
    '&:enabled:hover, &:enabled:focus': {
      backgroundColor: theme.palette.action.hover,
    },
  },
  '& .react-calendar__month-view__weekdays': {
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: '0.75rem',
    textTransform: 'uppercase',
    '& abbr': {
      textDecoration: 'none',
    },
  },
  '& .react-calendar__month-view__days__day--weekend': {
    color: theme.palette.error.main,
  },
  '& .react-calendar__tile': {
    maxWidth: '100%',
    textAlign: 'center',
    padding: '10px 0',
    background: 'none',
    borderRadius: theme.shape.borderRadius,
    '&:enabled:hover, &:enabled:focus': {
      backgroundColor: theme.palette.action.hover,
    },
  },
  '& .react-calendar__tile--now': {
    backgroundColor: theme.palette.warning.light,
  },
  '& .react-calendar__tile--active': {
    backgroundColor: theme.palette.primary.main,
    color: theme.palette.primary.contrastText,
  },
  '& .fecha-con-registro': {
    backgroundColor: theme.palette.success.light,
    color: theme.palette.success.contrastText,
  },
  '& .fecha-inicio-servicio': {
    backgroundColor: theme.palette.info.light,
    color: theme.palette.info.contrastText,
  },
  '& .fecha-fin-servicio': {
    backgroundColor: theme.palette.secondary.light,
    color: theme.palette.secondary.contrastText,
  }
}));

// Componente principal
export default function ActiveSession() {
  const { currentUser } = useContext(AuthContext);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [openWelcome, setOpenWelcome] = useState(true);
  
  // Estados para la sesi√≥n actual
  const [actividades, setActividades] = useState('');
  const [horaEntrada, setHoraEntrada] = useState('--:--');
  const [horaSalida, setHoraSalida] = useState('--:--');
  const [tiempoAcumulado, setTiempoAcumulado] = useState('0.00 horas');
  const [sesionIniciada, setSesionIniciada] = useState(false);
  const [sesionFinalizada, setSesionFinalizada] = useState(false);
  const [evidencias, setEvidencias] = useState([]);
  const fileInputRef = useRef(null);

  // Estados para el historial
  const [fechaSeleccionada, setFechaSeleccionada] = useState(null);
  const [mostrarTabla, setMostrarTabla] = useState(true);
  const [mostrarDetalle, setMostrarDetalle] = useState(false);
  const [registroSeleccionado, setRegistroSeleccionado] = useState(null);
  const [fechaInicioServicio, setFechaInicioServicio] = useState(null);
  const [fechaFinServicio, setFechaFinServicio] = useState(null);
  
  // Estado para los registros
  const [registrosHistorial, setRegistrosHistorial] = useState([
    {
      fecha: '10/05/2025',
      fechaObj: new Date(2025, 4, 10),
      horaEntrada: '09:00',
      horaSalida: '13:00',
      horasRealizadas: '4.00',
      descripcion: 'Desarrollo de interfaz de usuario y correcci√≥n de errores en m√≥dulo de reportes',
      evidencias: [
        { name: 'documento.pdf', url: '/api/placeholder/documento.pdf' },
        { name: 'foto_evidencia.jpg', url: '/api/placeholder/foto_evidencia.jpg' }
      ]
    },
    {
      fecha: '11/05/2025',
      fechaObj: new Date(2025, 4, 11),
      horaEntrada: '10:30',
      horaSalida: '14:30',
      horasRealizadas: '4.00',
      descripcion: 'Implementaci√≥n de caracter√≠sticas de filtrado y b√∫squeda avanzada',
      evidencias: [
        { name: 'presentacion.pptx', url: '/api/placeholder/presentacion.pptx' },
        { name: 'video_explicativo.mp4', url: '/api/placeholder/video_explicativo.mp4' }
      ]
    }
  ]);

  // Calcular el total de horas y verificar si se completaron 500 horas
  const totalHoras = useCallback(() => {
    const total = registrosHistorial.reduce((sum, registro) => {
      return sum + parseFloat(registro.horasRealizadas);
    }, 0);
    
    // Verificar si se completaron 500 horas
    if (total >= 500 && !fechaFinServicio) {
      const ultimoRegistro = [...registrosHistorial].pop();
      if (ultimoRegistro) {
        setFechaFinServicio(ultimoRegistro.fechaObj);
      }
    }
    
    return total.toFixed(2);
  }, [registrosHistorial, fechaFinServicio]);

  // Establecer fecha de inicio al primer registro
  useEffect(() => {
    if (registrosHistorial.length > 0 && !fechaInicioServicio) {
      setFechaInicioServicio(registrosHistorial[0].fechaObj);
    }
  }, [registrosHistorial, fechaInicioServicio]);

  // Manejo de evidencias (acepta todos los tipos de archivos)
  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    setEvidencias(prev => [...prev, ...files]);
  };

  const removeEvidencia = (index) => {
    setEvidencias(prev => prev.filter((_, i) => i !== index));
  };

  // Funci√≥n para obtener el √≠cono seg√∫n el tipo de archivo
  const getFileIcon = (fileName) => {
    const extension = fileName.split('.').pop().toLowerCase();
    
    // Mapa de extensiones a componentes de √≠conos de Material UI
    const iconMap = {
      // Documentos
      pdf: <PdfIcon />,
      doc: <DocIcon />,
      docx: <DocIcon />,
      odt: <DocIcon />,
      txt: <FileIcon />,
      // Hojas de c√°lculo
      xls: <TableChartIcon />,
      xlsx: <TableChartIcon />,
      csv: <TableChartIcon />,
      ods: <TableChartIcon />,
      // Presentaciones
      ppt: <SlideIcon />,
      pptx: <SlideIcon />,
      odp: <SlideIcon />,
      // Im√°genes
      jpg: <ImageIcon />,
      jpeg: <ImageIcon />,
      png: <ImageIcon />,
      gif: <ImageIcon />,
      webp: <ImageIcon />,
      svg: <ImageIcon />,
      // Videos
      mp4: <VideoIcon />,
      mov: <VideoIcon />,
      avi: <VideoIcon />,
      mkv: <VideoIcon />,
      webm: <VideoIcon />,
      // Audio
      mp3: <AudioIcon />,
      wav: <AudioIcon />,
      ogg: <AudioIcon />,
      // Comprimidos
      zip: <CompressIcon />,
      rar: <CompressIcon />,
      '7z': <CompressIcon />
    };
    
    return iconMap[extension] || <FileIcon />;
  };

  // A√±adir estados para el di√°logo
  const [openDialog, setOpenDialog] = useState(false);
  const [dialogType, setDialogType] = useState(''); // 'start' o 'end'
  
  // Funci√≥n para mostrar el di√°logo
  const showConfirmDialog = (type) => {
    setDialogType(type);
    setOpenDialog(true);
  };

  // Funci√≥n para manejar la confirmaci√≥n del di√°logo
  const handleConfirm = async () => {
    setLoading(true);
    setError('');

    if (dialogType === 'start') {
      const ahora = new Date();
      const hora = ahora.getHours().toString().padStart(2, '0');
      const minutos = ahora.getMinutes().toString().padStart(2, '0');
      setHoraEntrada(`${hora}:${minutos}`);
      setSesionIniciada(true);
      setSesionFinalizada(false);
      setTiempoAcumulado('0.00 horas');
      setLoading(false);
    } else if (dialogType === 'end') {
      if (!actividades.trim()) {
        setError("Llena el apartado 'Actividades realizadas' para poder continuar");
        setLoading(false);
        return;
      }

      try {
        const ahora = new Date();
        const hora = ahora.getHours().toString().padStart(2, '0');
        const minutos = ahora.getMinutes().toString().padStart(2, '0');
        const horaSalida = `${hora}:${minutos}`;
        
        let horasTrabajadas = 0;
        if (horaEntrada !== '--:--') {
          const entrada = horaEntrada.split(':');
          const salida = horaSalida.split(':');
          horasTrabajadas = (parseInt(salida[0]) - parseInt(entrada[0])) + 
                           (parseInt(salida[1]) - parseInt(entrada[1])) / 60;
        }

        const formData = new FormData();
        formData.append('fecha', ahora.toISOString());
        formData.append('horaEntrada', horaEntrada);
        formData.append('horaSalida', horaSalida);
        formData.append('horasRealizadas', horasTrabajadas.toFixed(2));
        formData.append('descripcion', actividades);

        // Agregar cada evidencia al formData
        evidencias.forEach(file => {
          formData.append('evidencias', file);
        });

        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error('No hay token de autenticaci√≥n');
        }

        const response = await fetch('http://localhost:3001/api/records/create', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || 'Error al guardar el registro');
        }

        // Actualizar el historial de registros
        const nuevoRegistro = {
          ...data.data,
          fecha: new Date(data.data.fecha).toLocaleDateString('es-MX'),
          fechaObj: new Date(data.data.fecha)
        };
        
        setRegistrosHistorial(prev => [nuevoRegistro, ...prev]);
        setSesionIniciada(false);
        setSesionFinalizada(true);
        setHoraSalida(horaSalida);
        setTiempoAcumulado(`${horasTrabajadas.toFixed(2)} horas`);
        setActividades('');
        setEvidencias([]);

      } catch (error) {
        console.error('Error:', error);
        setError(error.message || 'Error al guardar el registro. Por favor intenta de nuevo.');
      } finally {
        setLoading(false);
      }
    }
    setOpenDialog(false);
  };

  // Modificar las funciones existentes
  const iniciarContador = () => {
    showConfirmDialog('start');
  };

  const finalizarServicio = () => {
    if (!actividades.trim()) {
      alert("Llena el apartado 'Actividades realizadas' para poder continuar");
      return;
    }
    showConfirmDialog('end');
  };

  // Funci√≥n para manejar la selecci√≥n de fecha en el calendario
  const handleFechaSeleccionada = useCallback((fecha) => {
    setFechaSeleccionada(fecha);
    
    const registro = registrosHistorial.find(reg => {
      const regFecha = reg.fechaObj;
      return regFecha.getDate() === fecha.getDate() && 
            regFecha.getMonth() === fecha.getMonth() && 
            regFecha.getFullYear() === fecha.getFullYear();
    });
    
    setRegistroSeleccionado(registro || null);
    setMostrarTabla(false);
    setMostrarDetalle(true);
  }, [registrosHistorial]);

  const volverATabla = () => {
    setMostrarTabla(true);
    setMostrarDetalle(false);
    setFechaSeleccionada(null);
  };

  // Funci√≥n para marcar fechas especiales en el calendario
  const tileClassName = useCallback(({ date, view }) => {
    if (view === 'month') {
      const clases = [];
      
      // Fechas con registros
      const tieneRegistro = registrosHistorial.some(registro => {
        const regFecha = registro.fechaObj;
        return regFecha.getDate() === date.getDate() && 
              regFecha.getMonth() === date.getMonth() && 
              regFecha.getFullYear() === date.getFullYear();
      });
      
      if (tieneRegistro) clases.push('fecha-con-registro');
      
      // Fecha de inicio
      if (fechaInicioServicio && 
          fechaInicioServicio.getDate() === date.getDate() && 
          fechaInicioServicio.getMonth() === date.getMonth() && 
          fechaInicioServicio.getFullYear() === date.getFullYear()) {
        clases.push('fecha-inicio-servicio');
      }
      
      // Fecha de fin (500 horas completadas)
      if (fechaFinServicio && 
          fechaFinServicio.getDate() === date.getDate() && 
          fechaFinServicio.getMonth() === date.getMonth() && 
          fechaFinServicio.getFullYear() === date.getFullYear()) {
        clases.push('fecha-fin-servicio');
      }
      
      return clases.join(' ');
    }
  }, [registrosHistorial, fechaInicioServicio, fechaFinServicio]);

  // Funci√≥n para formatear la fecha en formato legible
  const formatearFecha = useCallback((fecha) => {
    if (!fecha) return '';
    
    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
    
    return `${dias[fecha.getDay()]}, ${fecha.getDate()} de ${meses[fecha.getMonth()]} de ${fecha.getFullYear()}`;
  }, []);

  // Limpieza de recursos
  useEffect(() => {
    return () => {
      registrosHistorial.forEach(registro => {
        registro.evidencias?.forEach(evidencia => {
          if (evidencia.url?.startsWith('blob:')) {
            URL.revokeObjectURL(evidencia.url);
          }
        });
      });
    };
  }, [registrosHistorial]);


  // Cargar registros al montar el componente
  useEffect(() => {
    const cargarRegistros = async () => {
      if (!currentUser?._id) return;

      try {
        const response = await fetch(`http://localhost:3001/api/records/user/${currentUser._id}`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        });

        if (!response.ok) throw new Error('Error al cargar registros');
        
        const data = await response.json();
        const registrosFormateados = data.map(registro => ({
          ...registro,
          fechaObj: new Date(registro.fecha),
          fecha: new Date(registro.fecha).toLocaleDateString('es-MX')
        }));
        
        setRegistrosHistorial(registrosFormateados);
      } catch (error) {
        console.error('Error:', error);
      }
    };

    cargarRegistros();
  }, [currentUser?._id]);

  useEffect(() => {
    // Cerrar el mensaje de bienvenida despu√©s de 5 segundos
    const timer = setTimeout(() => {
      setOpenWelcome(false);
    }, 5000);

    return () => clearTimeout(timer);
  }, []);

  return (
    <ThemeProvider theme={theme}>
      <Container maxWidth="xl" sx={{ 
        py: 4,
        bgcolor: theme.palette.background.default,
        minHeight: '100vh'
      }}>
        <Snackbar
          open={openWelcome}
          autoHideDuration={5000}
          onClose={() => setOpenWelcome(false)}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert 
            onClose={() => setOpenWelcome(false)} 
            severity="success" 
            variant="filled"
            sx={{ width: '100%' }}
          >
            ¬°Bienvenido(a) {`${currentUser?.nombre} ${currentUser?.apellidoPaterno}`}! Iniciaste sesi√≥n correctamente.
          </Alert>
        </Snackbar>

        <Typography 
          variant="h4" 
          component="h1" 
          gutterBottom 
          sx={{ 
            mb: 3,
            color: theme.palette.primary.main,
            fontWeight: 'bold'
          }}
        >
          Registro de Horas de Servicio
        </Typography>
  
        {error && (
          <Alert 
            severity="error" 
            sx={{ mb: 3 }}
            onClose={() => setError('')}
          >
            {error}
          </Alert>
        )}

        <Paper 
          elevation={3} 
          sx={{ 
            position: 'relative', 
            overflow: 'hidden',
            bgcolor: theme.palette.background.paper,
            borderRadius: theme.shape.borderRadius
          }}
        >
          <Box sx={{ 
            position: 'absolute', 
            top: 12, 
            right: 16, 
            display: 'flex', 
            alignItems: 'center',
            zIndex: 1
          }}>
            <StatusDot />
            <Typography variant="caption" color="text.secondary">
              Conectado a la red
            </Typography>
          </Box>
          
          <Grid container>
            {/* Columna de Sesi√≥n Actual */}
            <Grid item xs={12} md={5} sx={{ p: 3, borderRight: { xs: 'none', md: '1px solid #e0e0e0' } }}>
              <Typography variant="h6" gutterBottom sx={{ mb: 2 }}>
                Sesi√≥n Actual
              </Typography>
              
              <TableContainer component={Paper} elevation={0} sx={{ mb: 3 }}>
                <Table size="small">
                  <TableBody>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>
                        Fecha:
                      </TableCell>
                      <TableCell>{new Date().toLocaleDateString('es-MX')}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>
                        Hora de entrada:
                      </TableCell>
                      <TableCell>{horaEntrada}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>
                        Hora de salida:
                      </TableCell>
                      <TableCell>{horaSalida}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>
                        Tiempo acumulado:
                      </TableCell>
                      <TableCell>{tiempoAcumulado}</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ fontWeight: 'bold' }}>
                        Total horas acumuladas:
                      </TableCell>
                      <TableCell>{totalHoras()} horas</TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 'bold' }}>
                  Actividades realizadas:
                </Typography>
                <TextField
                  fullWidth
                  multiline
                  rows={4}
                  variant="outlined"
                  value={actividades}
                  onChange={(e) => setActividades(e.target.value)}
                  placeholder="Describe detalladamente las actividades realizadas durante tu servicio"
                  required
                  size="small"
                />
              </Box>
              
              <Box sx={{ mb: 3 }}>
                <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 'bold' }}>
                  Evidencias (Archivos):
                </Typography>
                <UploadButton
                  variant="contained"
                  component="label"
                  startIcon={<CloudUploadIcon />}
                  onClick={() => fileInputRef.current.click()}
                  color="primary"
                  size="small"
                >
                  Agregar evidencia
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileChange}
                    accept="*/*"
                    multiple
                    style={{ display: 'none' }}
                  />
                </UploadButton>
                
                <Box sx={{ mt: 2 }}>
                  {evidencias.length > 0 ? (
                    evidencias.map((evidencia, index) => (
                      <FilePreviewItem key={index}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          {getFileIcon(evidencia.name)}
                          <Typography variant="body2" sx={{ ml: 1 }}>
                            {evidencia.name}
                          </Typography>
                        </Box>
                        <IconButton 
                          edge="end" 
                          size="small" 
                          onClick={() => removeEvidencia(index)}
                          color="error"
                        >
                          <CloseIcon fontSize="small" />
                        </IconButton>
                      </FilePreviewItem>
                    ))
                  ) : (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      No hay evidencias adjuntas
                    </Typography>
                  )}
                </Box>
              </Box>
              
              <Box sx={{ mb: 3 }}>
                <Chip 
                  label={
                    sesionFinalizada 
                      ? "Sesi√≥n finalizada" 
                      : sesionIniciada 
                      ? "Sesi√≥n en progreso" 
                      : "No hay horas registradas hoy"
                  }
                  color={
                    sesionFinalizada 
                      ? "success" 
                      : sesionIniciada 
                      ? "warning" 
                      : "default"
                  }
                  variant="outlined"
                  size="small"
                />
                
                {fechaFinServicio && (
                  <Alert 
                    icon={<CheckCircleIcon fontSize="inherit" />} 
                    severity="success"
                    sx={{ mt: 2 }}
                  >
                    ¬°Servicio social completado!
                  </Alert>
                )}
              </Box>
              
              <Box sx={{ mt: 2 }}>
                {!sesionIniciada && !sesionFinalizada && !fechaFinServicio && (
                  <Button
                    variant="contained"
                    color="primary"
                    fullWidth
                    onClick={iniciarContador}
                    startIcon={<PlayArrowIcon />}
                    sx={{
                      background: `linear-gradient(90deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,
                      '&:hover': {
                        background: `linear-gradient(90deg, ${theme.palette.primary.dark} 0%, ${theme.palette.primary.main} 100%)`,
                      }
                    }}
                  >
                    Registrar Hora de Entrada
                  </Button>
                )}
                
                {sesionIniciada && !sesionFinalizada && (
                  <Button
                    variant="contained"
                    color="error"
                    fullWidth
                    onClick={finalizarServicio}
                    startIcon={<StopIcon />}
                  >
                    Finalizar servicio diario
                  </Button>
                )}
              </Box>
            </Grid>
            
            {/* Columna de Historial */}
            <Grid item xs={12} md={7} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom sx={{ mb: 2 }}>
                Historial de Registros
              </Typography>
              
              {mostrarTabla && (
                <Box>
                  <Paper sx={{ p: 2, mb: 3 }}>
                    <StyledCalendar
                      onChange={handleFechaSeleccionada}
                      value={fechaSeleccionada}
                      locale="es"
                      formatShortWeekday={(locale, date) => 
                        ['D', 'L', 'M', 'M', 'J', 'V', 'S'][date.getDay()]
                      }
                      formatMonthYear={(locale, date) => {
                        const months = [
                          'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                          'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
                        ];
                        return `${months[date.getMonth()]} ${date.getFullYear()}`;
                      }}
                      tileClassName={tileClassName}
                    />
                    
                    <Typography variant="caption" align="center" color="text.secondary" sx={{ 
                      display: 'block', 
                      mt: 1,
                      textAlign: 'center'
                    }}>
                      Selecciona una fecha para ver detalles
                    </Typography>
                  </Paper>
                  
                  <Paper sx={{ p: 2, mb: 3 }}>
                    <Typography variant="subtitle2" gutterBottom>
                      Leyenda del calendario
                    </Typography>
                    <Grid container spacing={1} sx={{ mt: 1 }}>
                      <Grid item xs={6} sm={4}>
                        <CalendarLegendItem>
                          <LegendColor color="#d4edda" />
                          <Typography variant="caption">D√≠as con registro</Typography>
                        </CalendarLegendItem>
                      </Grid>
                      <Grid item xs={6} sm={4}>
                        <CalendarLegendItem>
                          <LegendColor color="#d1ecf1" />
                          <Typography variant="caption">Inicio de servicio</Typography>
                        </CalendarLegendItem>
                      </Grid>
                      <Grid item xs={6} sm={4}>
                        <CalendarLegendItem>
                          <LegendColor color="#f8d7da" />
                          <Typography variant="caption">Fin de servicio (500 horas)</Typography>
                        </CalendarLegendItem>
                      </Grid>
                      <Grid item xs={6} sm={4}>
                        <CalendarLegendItem>
                          <LegendColor color="#3f51b5" />
                          <Typography variant="caption">Fecha seleccionada</Typography>
                        </CalendarLegendItem>
                      </Grid>
                      <Grid item xs={6} sm={4}>
                        <CalendarLegendItem>
                          <LegendColor color="#ffff76" />
                          <Typography variant="caption">Hoy</Typography>
                        </CalendarLegendItem>
                      </Grid>
                    </Grid>
                  </Paper>
                  
                  {registrosHistorial.length > 0 ? (
                    <TableContainer component={Paper} sx={{ mt: 3 }}>
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Fecha</TableCell>
                            <TableCell>Entrada</TableCell>
                            <TableCell>Salida</TableCell>
                            <TableCell>Horas</TableCell>
                            <TableCell>Actividad</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {registrosHistorial.map((registro, index) => (
                            <TableRow key={index}>
                              <TableCell>{registro.fecha}</TableCell>
                              <TableCell>{registro.horaEntrada}</TableCell>
                              <TableCell>{registro.horaSalida}</TableCell>
                              <TableCell>{registro.horasRealizadas}</TableCell>
                              <TableCell 
                                sx={{ 
                                  maxWidth: 200, 
                                  overflow: 'hidden', 
                                  textOverflow: 'ellipsis', 
                                  whiteSpace: 'nowrap' 
                                }}
                              >
                                {registro.descripcion}
                              </TableCell>
                            </TableRow>
                          ))}
                          <TableRow>
                            <TableCell colSpan={3} sx={{ fontWeight: 'bold' }}>
                              Total de horas:
                            </TableCell>
                            <TableCell sx={{ fontWeight: 'bold' }}>
                              {totalHoras()}
                            </TableCell>
                            <TableCell></TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  ) : (
                    <Paper sx={{ p: 3, mt: 3, textAlign: 'center' }}>
                      <Typography color="text.secondary">
                        No hay registros disponibles. Inicia tu primer registro para comenzar.
                      </Typography>
                    </Paper>
                  )}
                </Box>
              )}
              
              {mostrarDetalle && (
                <Card elevation={2}>
                  <CardHeader
                    title={formatearFecha(fechaSeleccionada)}
                    action={
                      <Button
                        startIcon={<ArrowBackIcon />}
                        onClick={volverATabla}
                        size="small"
                        variant="outlined"
                      >
                        Volver
                      </Button>
                    }
                    sx={{ pb: 1 }}
                  />
                  <Divider />
                  <CardContent>
                    {registroSeleccionado ? (
                      <>
                        <Grid container spacing={2} sx={{ mb: 3 }}>
                          <Grid item xs={4}>
                            <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
                              <Typography variant="body2" color="text.secondary" gutterBottom>
                                Hora de entrada
                              </Typography>
                              <Typography variant="h6">
                                {registroSeleccionado.horaEntrada}
                              </Typography>
                            </Paper>
                          </Grid>
                          <Grid item xs={4}>
                            <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
                              <Typography variant="body2" color="text.secondary" gutterBottom>
                                Hora de salida
                              </Typography>
                              <Typography variant="h6">
                                {registroSeleccionado.horaSalida}
                              </Typography>
                            </Paper>
                          </Grid>
                          <Grid item xs={4}>
                            <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
                              <Typography variant="body2" color="text.secondary" gutterBottom>
                                Horas realizadas
                              </Typography>
                              <Typography variant="h6">
                                {registroSeleccionado.horasRealizadas}
                              </Typography>
                            </Paper>
                          </Grid>
                        </Grid>

                        <Paper sx={{ p: 2, mb: 3 }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Descripci√≥n de actividades:
                          </Typography>
                          <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
                            {registroSeleccionado.descripcion}
                          </Typography>
                        </Paper>

                        <Paper sx={{ p: 2 }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Evidencias:
                          </Typography>
                          {registroSeleccionado.evidencias?.length > 0 ? (
                            <List>
                              {registroSeleccionado.evidencias.map((evidencia, index) => (
                                <ListItem
                                  key={index}
                                  sx={{
                                    bgcolor: 'background.default',
                                    borderRadius: 1,
                                    mb: 1
                                  }}
                                >
                                  <ListItemIcon>
                                    {getFileIcon(evidencia.name)}
                                  </ListItemIcon>
                                  <ListItemText 
                                    primary={evidencia.name}
                                  />
                                  <ListItemSecondaryAction>
                                    <IconButton 
                                      edge="end"
                                      component="a"
                                      href={evidencia.url}
                                      target="_blank"
                                      size="small"
                                    >
                                      <FileIcon />
                                    </IconButton>
                                  </ListItemSecondaryAction>
                                </ListItem>
                              ))}
                            </List>
                          ) : (
                            <Typography variant="body2" color="text.secondary" sx={{ 
                              fontStyle: 'italic',
                              textAlign: 'center',
                              py: 2
                            }}>
                              No hay evidencias registradas para esta fecha
                            </Typography>
                          )}
                        </Paper>
                      </>
                    ) : (
                      <Alert
                        severity="info"
                        icon={<WarningIcon />}
                        sx={{ my: 2 }}
                      >
                        No hay registros para la fecha seleccionada
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              )}
            </Grid>
          </Grid>
        </Paper>
        
        <Dialog
          open={openDialog}
          onClose={() => !loading && setOpenDialog(false)}
          aria-labelledby="alert-dialog-title"
          aria-describedby="alert-dialog-description"
        >
          <DialogTitle id="alert-dialog-title">
            {dialogType === 'start' ? 'Iniciar registro de horas' : 'Finalizar servicio diario'}
          </DialogTitle>
          <DialogContent>
            <DialogContentText id="alert-dialog-description">
              {dialogType === 'start' 
                ? "Al iniciar el contador de horas tu tiempo empezar√° a ser contado y no podr√° ser corregido. Si lo iniciaste antes de tiempo, solicita ayuda a tu administrador para corregir tu hora."
                : "Al presionar este bot√≥n finalizar√°s el conteo de tus horas diarias de servicio y no podr√°s volver a iniciarlo. ¬øDeseas finalizar el conteo de horas de servicio?"
              }
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button 
              onClick={() => setOpenDialog(false)} 
              color="inherit"
              disabled={loading}
            >
              Cancelar
            </Button>
            <Button 
              onClick={handleConfirm} 
              variant="contained" 
              color={dialogType === 'start' ? 'primary' : 'error'}
              disabled={loading}
              autoFocus
            >
              {loading ? (
                <CircularProgress size={24} sx={{ color: '#fff' }} />
              ) : (
                'Confirmar'
              )}
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </ThemeProvider>
  );
};